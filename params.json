{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A thin object-oriented layer above WebGL.","body":"oogl.js\r\n=======\r\n\r\nA thin object-oriented layer above WebGL.\r\n\r\nOOGL provides an augmented GL context that adds object-oriented features that allow you to make GL calls more easily while keeping maximum possible performance.\r\n\r\nOOGL is not another scene graph library: OOGL strongly focuses on performance and thus lets you do exactly what you would do in plain WebGL, just easier.\r\n\r\nGetting started\r\n===============\r\n\r\nTo get started with OOGL, include it using a `<script>` tag in the `<head>` of your document:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"http://cdn.oogljs.com/oogl-1.0.0.min.js\"></script>\r\n```\r\n\r\nThen place a `<canvas>` in your DOM and create an OOGL context through JavaScript:\r\n\r\n```html\r\n<canvas id=\"canvas\" width=\"800\" height=\"600\">\r\n\t<p>No browser support.</p>\r\n</canvas>\r\n<script type=\"text/javascript\">\r\n$(function () {\r\n\tvar oogl = new $.Context('canvas');\r\n\r\n\t// example GL calls\r\n\toogl.clearColor(0, 0, 0, 1);\r\n\toogl.clear(oogl.COLOR_BUFFER_BIT);\r\n\toogl.flush();\r\n});\r\n</script>\r\n```\r\n\r\nThe `oogl` object now contains all the WebGL functions a normal `gl` object would contain, plus OOGL-specific features.\r\n\r\nThe first triangle\r\n==================\r\n\r\nDrawing with OOGL is easier than doing it with plain WebGL.\r\n\r\nLet's first create a pair of shaders. Here's the vertex one:\r\n\r\n```glsl\r\nattribute vec2 in_Vertex;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(in_Vertex, 0, 2);\r\n}\r\n```\r\n\r\nAnd the fragment one:\r\n\r\n```glsl\r\nvoid main() {\r\n\tgl_FragColor = vec4(1);\r\n}\r\n```\r\n\r\nAssume they are called `test.vert` and `test.frag`, respectively, and they are located in the same directory as the HTML page.\r\n\r\nThe OOGL calls needed to create a vertex array, load the shaders and make the drawing are as follows:\r\n\r\n```javascript\r\n$(function () {\r\n\tvar oogl = new $.Context('canvas');\r\n\toogl.clearColor(0, 0, 0, 1);\r\n\toogl.clear(oogl.COLOR_BUFFER_BIT);\r\n\tvar array = new oogl.VertexArray(0, 2, [-1, 1, -1, -1, 1, -1]);\r\n\tvar program = new oogl.DefaultProgram('test', ['in_Vertex'], function () {\r\n\t\tprogram.use();\r\n\t\toogl.drawArrays(oogl.TRIANGLES, 0, 3);\r\n\t\toogl.flush();\r\n\t});\r\n});\r\n```\r\n\r\nThe constructed `DefaultProgram` object refers to the `test.vert` and `test.frag` files because of its `test` first argument; the `.vert` and `.frag` extensions are added automatically.\r\n\r\nThe last calls (`program.use()` through `oogl.flush()`) are made asynchronously in a callback function passed to the `DefaultProgram` constructor because the shader files need to be loaded asynchronously through AJAX.\r\n\r\nMath stuff\r\n==========\r\n\r\nTBD\r\n\r\njQuery\r\n======\r\n\r\nTBD\r\n\r\nCredits\r\n=======\r\n\r\nOOGL was created by Alberto La Rocca and is licensed under the MIT License.\r\n","name":"oogl.js","google":""}