{
    "project": {
        "name": "OOGL.js 1.0",
        "description": "A thin object oriented layer above WebGL.",
        "version": "1.0.0",
        "url": "http://oogljs.com/"
    },
    "files": {
        "src\\Ajax.js": {
            "name": "src\\Ajax.js",
            "modules": {},
            "classes": {
                "OOGL.Ajax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Arrays.js": {
            "name": "src\\Arrays.js",
            "modules": {},
            "classes": {
                "oogl.AttributeArray1": 1,
                "oogl.AttributeArray2": 1,
                "oogl.AttributeArray3": 1,
                "oogl.AttributeArray4": 1,
                "oogl.AttributeArrays": 1,
                "oogl.ElementArray": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Buffers.js": {
            "name": "src\\Buffers.js",
            "modules": {},
            "classes": {
                "oogl.Buffer": 1,
                "oogl.StaticBuffer": 1,
                "oogl.StreamBuffer": 1,
                "oogl.DynamicBuffer": 1,
                "oogl.ArrayBuffer": 1,
                "oogl.ElementArrayBuffer": 1,
                "oogl.StaticArrayBuffer": 1,
                "oogl.StaticElementArrayBuffer": 1,
                "oogl.StreamArrayBuffer": 1,
                "oogl.StreamElementArrayBuffer": 1,
                "oogl.DynamicArrayBuffer": 1,
                "oogl.DynamicElementArrayBuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\ContextBegin.js": {
            "name": "src\\ContextBegin.js",
            "modules": {},
            "classes": {
                "OOGL.Context": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Framebuffer.js": {
            "name": "src\\Framebuffer.js",
            "modules": {},
            "classes": {
                "oogl.Framebuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix2.js": {
            "name": "src\\Matrix2.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix2": 1,
                "OOGL.RotationMatrix2": 1,
                "OOGL.ScalingMatrix2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix3.js": {
            "name": "src\\Matrix3.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix3": 1,
                "OOGL.RotationMatrix3": 1,
                "OOGL.ScalingMatrix3": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix4.js": {
            "name": "src\\Matrix4.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix4": 1,
                "OOGL.TranslationMatrix4": 1,
                "OOGL.RotationMatrix4": 1,
                "OOGL.ScalingMatrix4": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Programs.js": {
            "name": "src\\Programs.js",
            "modules": {},
            "classes": {
                "oogl.Program": 1,
                "oogl.AutoProgram": 1,
                "oogl.AjaxProgram": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\RenderLoop.js": {
            "name": "src\\RenderLoop.js",
            "modules": {},
            "classes": {
                "OOGL.RenderLoop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Renderbuffer.js": {
            "name": "src\\Renderbuffer.js",
            "modules": {},
            "classes": {
                "oogl.Renderbuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Shaders.js": {
            "name": "src\\Shaders.js",
            "modules": {},
            "classes": {
                "oogl.Shader": 1,
                "oogl.VertexShader": 1,
                "oogl.FragmentShader": 1,
                "oogl.AjaxVertexShader": 1,
                "oogl.AjaxFragmentShader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Textures.js": {
            "name": "src\\Textures.js",
            "modules": {},
            "classes": {
                "oogl.Texture": 1,
                "oogl.Texture2D": 1,
                "oogl.CubeMap": 1,
                "oogl.Textures": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector2.js": {
            "name": "src\\Vector2.js",
            "modules": {},
            "classes": {
                "OOGL.Vector2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector3.js": {
            "name": "src\\Vector3.js",
            "modules": {},
            "classes": {
                "OOGL.Vector3": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector4.js": {
            "name": "src\\Vector4.js",
            "modules": {},
            "classes": {
                "OOGL.Vector4": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "OOGL.Ajax": {
            "name": "OOGL.Ajax",
            "shortname": "OOGL.Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Ajax.js",
            "line": 3,
            "description": "Provides methods for performing AJAX requests. Useful for loading assets such\nas shaders.",
            "static": 1
        },
        "oogl.AttributeArray1": {
            "name": "oogl.AttributeArray1",
            "shortname": "oogl.AttributeArray1",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 3,
            "description": "Creates an array buffer with static draw usage representing a single\ncomponent vertex attribute array.\n\nThe attribute array is associated to the specified `index`: the\n`AttributeArray` constructor enables the `index`-th attribute array calling\n`gl.enableVertexAttribArray` and the provided `pointer` method invokes\n`gl.vertexAttribPointer` with the specified `index` and `type`.",
            "extends": "oogl.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "TODO",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "TODO",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray1(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "oogl.AttributeArray2": {
            "name": "oogl.AttributeArray2",
            "shortname": "oogl.AttributeArray2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 93,
            "description": "Creates an array buffer with static draw usage representing a 2-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the\n`AttributeArray` constructor enables the `index`-th attribute array calling\n`gl.enableVertexAttribArray` and the provided `pointer` method invokes\n`gl.vertexAttribPointer` with the specified `index` and `type`.",
            "extends": "oogl.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "TODO",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "TODO",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray2(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "oogl.AttributeArray3": {
            "name": "oogl.AttributeArray3",
            "shortname": "oogl.AttributeArray3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 183,
            "description": "Creates an array buffer with static draw usage representing a 3-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the\n`AttributeArray` constructor enables the `index`-th attribute array calling\n`gl.enableVertexAttribArray` and the provided `pointer` method invokes\n`gl.vertexAttribPointer` with the specified `index` and `type`.",
            "extends": "oogl.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "TODO",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "TODO",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "oogl.AttributeArray4": {
            "name": "oogl.AttributeArray4",
            "shortname": "oogl.AttributeArray4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 273,
            "description": "Creates an array buffer with static draw usage representing a 4-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the\n`AttributeArray` constructor enables the `index`-th attribute array calling\n`gl.enableVertexAttribArray` and the provided `pointer` method invokes\n`gl.vertexAttribPointer` with the specified `index` and `type`.",
            "extends": "oogl.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "TODO",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "TODO",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray4(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "oogl.AttributeArrays": {
            "name": "oogl.AttributeArrays",
            "shortname": "oogl.AttributeArrays",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 365,
            "description": "Represents a set of vertex attribute arrays; simplifies the management of\nmultiple arrays.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "count",
                    "description": "The number of vertex attributes each array will\n\tcontain.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays();\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.bindAndPointer();\n\tprogram.use();\n\tarrays.drawTriangles();"
            ]
        },
        "oogl.ElementArray": {
            "name": "oogl.ElementArray",
            "shortname": "oogl.ElementArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Arrays.js",
            "line": 583,
            "description": "Represents an element array.\n\nThis class inherits `StaticElementArrayBuffer` and introduces utility\nmethods.",
            "extends": "oogl.StaticElementArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "indices",
                    "description": "The element indices.",
                    "type": "Number[]"
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'ushort'"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays();\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.bindAndPointer();\n\tvar elements = new oogl.ElementArray(indices);\n\telements.bind();\n\tprogram.use();\n\telements.drawTriangles();"
            ]
        },
        "oogl.Buffer": {
            "name": "oogl.Buffer",
            "shortname": "oogl.Buffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 3,
            "description": "Wraps a GL buffer with a specified target, data type and usage settings.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createBuffer`. The returned `WebGLBuffer` object is extended by\nOOGL-specific features and returned by the `Buffer` constructor.",
            "extends": "WebGLBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar buffer = new oogl.Buffer(oogl.ARRAY_BUFFER, 'float', oogl.STATIC_DRAW);"
            ]
        },
        "oogl.StaticBuffer": {
            "name": "oogl.StaticBuffer",
            "shortname": "oogl.StaticBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 212,
            "description": "Wraps a GL buffer whose usage is set to `gl.STATIC_DRAW`.",
            "extends": "oogl.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "oogl.StreamBuffer": {
            "name": "oogl.StreamBuffer",
            "shortname": "oogl.StreamBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 230,
            "description": "Wraps a GL buffer whose usage is set to `gl.STREAM_DRAW`.",
            "extends": "oogl.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "oogl.DynamicBuffer": {
            "name": "oogl.DynamicBuffer",
            "shortname": "oogl.DynamicBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 248,
            "description": "Wraps a GL buffer whose usage is set to `gl.DYNAMIC_DRAW`.",
            "extends": "oogl.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "oogl.ArrayBuffer": {
            "name": "oogl.ArrayBuffer",
            "shortname": "oogl.ArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 266,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER`.",
            "extends": "oogl.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.ArrayBuffer('float', oogl.STATIC_DRAW);"
            ]
        },
        "oogl.ElementArrayBuffer": {
            "name": "oogl.ElementArrayBuffer",
            "shortname": "oogl.ElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 284,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER`.",
            "extends": "oogl.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.ElementArrayBuffer('float', oogl.STATIC_DRAW);"
            ]
        },
        "oogl.StaticArrayBuffer": {
            "name": "oogl.StaticArrayBuffer",
            "shortname": "oogl.StaticArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 302,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.STATIC_DRAW`.",
            "extends": "oogl.StaticBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticArrayBuffer('float');"
            ]
        },
        "oogl.StaticElementArrayBuffer": {
            "name": "oogl.StaticElementArrayBuffer",
            "shortname": "oogl.StaticElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 318,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.STATIC_DRAW`.",
            "extends": "oogl.StaticBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticElementArrayBuffer('float');"
            ]
        },
        "oogl.StreamArrayBuffer": {
            "name": "oogl.StreamArrayBuffer",
            "shortname": "oogl.StreamArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 334,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.STREAM_DRAW`.",
            "extends": "oogl.StreamBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamArrayBuffer('float');"
            ]
        },
        "oogl.StreamElementArrayBuffer": {
            "name": "oogl.StreamElementArrayBuffer",
            "shortname": "oogl.StreamElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 350,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.STREAM_DRAW`.",
            "extends": "oogl.StreamBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamElementArrayBuffer('float');"
            ]
        },
        "oogl.DynamicArrayBuffer": {
            "name": "oogl.DynamicArrayBuffer",
            "shortname": "oogl.DynamicArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 366,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.DYNAMIC_DRAW`.",
            "extends": "oogl.DynamicBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicArrayBuffer('float');"
            ]
        },
        "oogl.DynamicElementArrayBuffer": {
            "name": "oogl.DynamicElementArrayBuffer",
            "shortname": "oogl.DynamicElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Buffers.js",
            "line": 382,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.DYNAMIC_DRAW`.",
            "extends": "oogl.DynamicBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicElementArrayBuffer('float');"
            ]
        },
        "OOGL.Context": {
            "name": "OOGL.Context",
            "shortname": "OOGL.Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\ContextBegin.js",
            "line": 1,
            "description": "Requests a new WebGL context on the specified canvas and wraps it in a new\nOOGL object. An exception is thrown if WebGL is not supported or the GPU is\nblacklisted.\n\nThe constructed OOGL object extends a normal WebGL rendering context, so you\ncan use all the GL properties and functions just like you were using a normal\n`gl` object returned by `canvas.getContext('webgl')`:\n\n\tvar oogl = new OOGL.Context('canvas');\n\toogl.clearColor(0, 0, 0, 1);\n\toogl.clear(oogl.COLOR_BUFFER_BIT);\n\toogl.flush();\n\nFurthermore the OOGL object includes OOGL-specific subclasses like `Program`\nand `Shader`, so that you can say, for example:\n\n\tvar fragmentShader = new oogl.Shader(oogl.FRAGMENT_SHADER);\n\tfragmentShader.source(fragmentSource);\n\tfragmentShader.compile();\n\tif (!fragmentShader.getParameter(oogl.COMPILE_STATUS)) {\n\t\tthrow fragmentShader.getInfoLog();\n\t}\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvertexShader.source(vertexSource);\n\tvertexShader.compile();\n\tif (!vertexShader.getParameter(oogl.COMPILE_STATUS)) {\n\t\tthrow vertexShader.getInfoLog();\n\t}\n\tvar program = new oogl.Program();\n\tprogram.attachShader(fragmentShader);\n\tprogram.attachShader(vertexShader);\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_TexCoord');\n\tprogram.link();\n\tif (!program.getParameter(oogl.LINK_STATUS)) {\n\t\tthrow program.getInfoLog();\n\t}\n\tprogram.use();\n\nOr, simpler:\n\n\t// automatically compiles and links, throws if an error occurs\n\tvar program = new oogl.AutoProgram(fragmentSource, vertexSource, ['in_Vertex, in_TexCoord']);\n\tprogram.use();",
            "extends": "WebGLRenderingContext",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasOrId",
                    "description": "An HTMLCanvasElement DOM object, or a string\n\tcontaining its `id` attribute, representing the canvas whose WebGL context\n\thas to be wrapped.",
                    "type": "Mixed"
                },
                {
                    "name": "attributes",
                    "description": "WebGL attributes to pass to `canvas.getContext`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas', {\n\t\tstencil: true\n\t});"
            ]
        },
        "oogl.Framebuffer": {
            "name": "oogl.Framebuffer",
            "shortname": "oogl.Framebuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Framebuffer.js",
            "line": 3,
            "description": "Wraps a GL framebuffer object.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createFramebuffer`. The returned `WebGLFramebuffer` object is extended by\nOOGL-specific features and returned by the `Framebuffer` constructor.",
            "is_constructor": 1,
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar framebuffer = new oogl.Framebuffer();"
            ]
        },
        "OOGL.Matrix2": {
            "name": "OOGL.Matrix2",
            "shortname": "OOGL.Matrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix2.js",
            "line": 3,
            "description": "A mutable 2x2 matrix.",
            "extends": "Array",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 4-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in row-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 4.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 0, 0, 1]); // creates the 2x2 identity matrix"
            ]
        },
        "OOGL.RotationMatrix2": {
            "name": "OOGL.RotationMatrix2",
            "shortname": "OOGL.RotationMatrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix2.js",
            "line": 315,
            "description": "Creates a 2D rotation matrix with the specified angle.",
            "extends": "OOGL.Matrix2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The (counterclockwise) rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar rotation = new OOGL.RotationMatrix2(30 * Math.PI / 180); // 30 degrees rotation"
            ]
        },
        "OOGL.ScalingMatrix2": {
            "name": "OOGL.ScalingMatrix2",
            "shortname": "OOGL.ScalingMatrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix2.js",
            "line": 331,
            "description": "Creates a 2D scaling matrix with the specified X and Y scaling factors.",
            "extends": "OOGL.Matrix2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar scaling = new OOGL.ScalingMatrix2(0.5, 0.5); // halves the size of anything"
            ]
        },
        "OOGL.Matrix3": {
            "name": "OOGL.Matrix3",
            "shortname": "OOGL.Matrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix3.js",
            "line": 3,
            "description": "A mutable 3x3 matrix.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 9-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in row-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 9.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 0, 0, 0, 1, 0, 0, 0, 1]); // creates the 3x3 identity matrix"
            ]
        },
        "OOGL.RotationMatrix3": {
            "name": "OOGL.RotationMatrix3",
            "shortname": "OOGL.RotationMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix3.js",
            "line": 353,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise about\nthe specified `(x, y, z)` axis by the specified `a` angle.\n\nThe specified `x`, `y` and `z` components must form a unit-length vector.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The rotation angle.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.RotationMatrix3(0, 1, 0, Math.PI / 2); // 90 degrees horizontal rotation"
            ]
        },
        "OOGL.ScalingMatrix3": {
            "name": "OOGL.ScalingMatrix3",
            "shortname": "OOGL.ScalingMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix3.js",
            "line": 385,
            "description": "Creates a 3D scaling matrix using the specified `x`, `y` and `z` scaling\nfactors.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.ScalingMatrix3(0.5, 0.5, 0.5); // halves the size of everything"
            ]
        },
        "OOGL.Matrix4": {
            "name": "OOGL.Matrix4",
            "shortname": "OOGL.Matrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix4.js",
            "line": 3,
            "description": "A mutable 4x4 matrix.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 16-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in row-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 16.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\t// create the 4x4 identity matrix\n\tvar matrix = new OOGL.Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);"
            ]
        },
        "OOGL.TranslationMatrix4": {
            "name": "OOGL.TranslationMatrix4",
            "shortname": "OOGL.TranslationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix4.js",
            "line": 73,
            "description": "Creates a 3D translation matrix.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the translation vector.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the translation vector.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the translation vector.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\t// translate by 3 units on the X axis, 4 on the Y axis and 5 on the Z axis\n\tvar m = new OOGL.TranslationMatrix4(3, 4, 5);"
            ]
        },
        "OOGL.RotationMatrix4": {
            "name": "OOGL.RotationMatrix4",
            "shortname": "OOGL.RotationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix4.js",
            "line": 90,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise about\nthe specified `(x, y, z)` axis by the specified `a` angle.\n\nThe specified `x`, `y` and `z` components must form a unit-length vector.\n\nThe created matrix is identical to a rotation matrix created by using\n`OOGL.RotationMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The rotation angle.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.RotationMatrix4(0, 1, 0, Math.PI / 2); // 90 degrees horizontal rotation"
            ]
        },
        "OOGL.ScalingMatrix4": {
            "name": "OOGL.ScalingMatrix4",
            "shortname": "OOGL.ScalingMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Matrix4.js",
            "line": 132,
            "description": "Creates a 3D scaling matrix using the specified `x`, `y` and `z` scaling\nfactors.\n\nThe created matrix is identical to a scaling matrix created by using\n`OOGL.ScalingMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.ScalingMatrix4(0.5, 0.5, 0.5); // halves the size of everything"
            ]
        },
        "oogl.Program": {
            "name": "oogl.Program",
            "shortname": "oogl.Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Programs.js",
            "line": 3,
            "description": "Wraps a GL program.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createProgram`. The returned `WebGLProgram` object is extended by\nOOGL-specific features and returned by the `Program` constructor.\n\n`Program` objects also maintain an independent uniform location cache so that\nuniform operations are sped up as `gl.getUniformLocation` calls are needed\nonly once per variable name. The cache is automatically invalidated when the\nprogram is linked using the provided `link` or `linkOrThrow` methods.",
            "extends": "WebGLProgram",
            "is_constructor": 1,
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(vertexShader); // either a WebGLShader or OOGL.VertexShader object\n\tprogram.attachShader(fragmentShader); // either a WebGLShader or OOGL.VertexShader object\n\tprogram.linkOrThrow();"
            ]
        },
        "oogl.AutoProgram": {
            "name": "oogl.AutoProgram",
            "shortname": "oogl.AutoProgram",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Programs.js",
            "line": 377,
            "description": "TODO",
            "extends": "oogl.Program",
            "is_constructor": 1,
            "params": [
                {
                    "name": "vertexSource",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "fragmentSource",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "TODO",
                    "type": "String[]"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoords']);"
            ]
        },
        "oogl.AjaxProgram": {
            "name": "oogl.AjaxProgram",
            "shortname": "oogl.AjaxProgram",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Programs.js",
            "line": 399,
            "description": "TODO",
            "extends": "oogl.Program",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "TODO",
                    "type": "String[]"
                },
                {
                    "name": "callback",
                    "description": "TODO",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar arrays = new oogl.AttributeArrays(vertices.length);\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tvar program = new oogl.AjaxProgram('box', ['in_Vertex', 'in_Color', 'in_TexCoords'], function () {\n\t\tprogram.use();\n\t\tarrays.drawTriangles();\n\t\toogl.flush();\n\t});"
            ]
        },
        "OOGL.RenderLoop": {
            "name": "OOGL.RenderLoop",
            "shortname": "OOGL.RenderLoop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\RenderLoop.js",
            "line": 3,
            "description": "Efficient render loop implementation that uses `requestAnimationFrame` where\navailable and transparently falls back on `setInterval`.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tick",
                    "description": "A user-defined callback function that is invoked at\n\teach iteration of the loop. It typically contains (OO)GL calls that render\n\tthe full scene.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\t// setup the pipeline here, create programs and arrays\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\toogl.clear(oogl.COLOR_BUFFER_BIT | oogl.DEPTH_BUFFER_BIT);\n\t\tarrays.drawTriangles();\n\t\toogl.flush();\n\t});\n\tloop.start();"
            ]
        },
        "oogl.Renderbuffer": {
            "name": "oogl.Renderbuffer",
            "shortname": "oogl.Renderbuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Renderbuffer.js",
            "line": 3,
            "description": "Wraps a GL renderbuffer.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createRenderbuffer`. The returned `WebGLRenderbuffer` object is extended by\nOOGL-specific features and returned by the `Renderbuffer` constructor.",
            "is_constructor": 1,
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar renderbuffer = new oogl.Renderbuffer();"
            ]
        },
        "oogl.Shader": {
            "name": "oogl.Shader",
            "shortname": "oogl.Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Shaders.js",
            "line": 3,
            "description": "Wraps a GL shader.",
            "extends": "WebGLShader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of shader. Either `oogl.VERTEX_SHADER` or\n\t`oogl.FRAGMENT_SHADER`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvertexShader.source(vertexSource);\n\tvertexShader.compileOrThrow();"
            ]
        },
        "oogl.VertexShader": {
            "name": "oogl.VertexShader",
            "shortname": "oogl.VertexShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Shaders.js",
            "line": 179,
            "description": "A `Shader` whose type is `gl.VERTEX_SHADER`.\n\nThe `VertexShader` constructor optionally takes a string argument containing\nthe GLSL source code for the shader and tries to compile it through the\nprovided `compileOrThrow` method.",
            "extends": "oogl.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "The optional GLSL source code for the shader.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.VertexShader(vertexSource);"
            ]
        },
        "oogl.FragmentShader": {
            "name": "oogl.FragmentShader",
            "shortname": "oogl.FragmentShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Shaders.js",
            "line": 202,
            "description": "A `Shader` whose type is `gl.FRAGMENT_SHADER`.\n\nThe `FragmentShader` constructor optionally takes a string argument\ncontaining the GLSL source code for the shader and tries to compile it\nthrough the provided `compileOrThrow` method.",
            "extends": "oogl.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "The optional GLSL source code for the shader.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar fragmentShader = new oogl.FragmentShader(fragmentSource);"
            ]
        },
        "oogl.AjaxVertexShader": {
            "name": "oogl.AjaxVertexShader",
            "shortname": "oogl.AjaxVertexShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Shaders.js",
            "line": 225,
            "description": "A vertex shader which tries to load its GLSL source code using AJAX.\n\nThe `AjaxVertexShader` constructor also tries to compile the shader using the\nprovided `compileOrThrow` method. After the source code has been loaded and\ncompiled successfully the specified callback function is invoked.",
            "extends": "oogl.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "A URL referring to the GLSL source code.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tvar vertexShader = new oogl.AjaxVertexShader('vert/box.vert', function () {\n\t\tprogram.attachShader(vertexShader);\n\t});"
            ]
        },
        "oogl.AjaxFragmentShader": {
            "name": "oogl.AjaxFragmentShader",
            "shortname": "oogl.AjaxFragmentShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Shaders.js",
            "line": 253,
            "description": "A fragment shader which tries to load its GLSL source code using AJAX.\n\nThe `AjaxFragmentShader` constructor also tries to compile the shader using\nthe provided `compileOrThrow` method. After the source code has been loaded\nand compiled successfully the specified callback function is invoked.",
            "extends": "oogl.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "A URL referring to the GLSL source code.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tvar fragmentShader = new oogl.AjaxFragmentShader('frag/box.frag', function () {\n\t\tprogram.attachShader(fragmentShader);\n\t});"
            ]
        },
        "oogl.Texture": {
            "name": "oogl.Texture",
            "shortname": "oogl.Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Textures.js",
            "line": 3,
            "description": "Wraps a GL texture with a specified target.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createTexture`. The returned `WebGLTexture` object is extended by\nOOGL-specific features and returned by the `Texture` constructor.",
            "extends": "WebGLTexture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this texture will be bound\n\twhen the provided `bind` method is used. Either `gl.TEXTURE_2D` or\n\t`gl.TEXTURE_CUBE_MAP`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar texture = new oogl.Texture(oogl.TEXTURE_2D);"
            ]
        },
        "oogl.Texture2D": {
            "name": "oogl.Texture2D",
            "shortname": "oogl.Texture2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Textures.js",
            "line": 246,
            "description": "A texture whose type is `gl.TEXTURE_2D`.\n\nTODO",
            "extends": "oogl.Texture",
            "is_constructor": 1,
            "example": [
                "\n\tTODO"
            ]
        },
        "oogl.CubeMap": {
            "name": "oogl.CubeMap",
            "shortname": "oogl.CubeMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Textures.js",
            "line": 261,
            "description": "A texture whose type is `gl.TEXTURE_CUBE_MAP`.\n\nTODO",
            "extends": "oogl.Texture",
            "is_constructor": 1,
            "example": [
                "\n\tTODO"
            ]
        },
        "oogl.Textures": {
            "name": "oogl.Textures",
            "shortname": "oogl.Textures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Textures.js",
            "line": 276,
            "description": "A utility class that aids in the management of multiple textures.\n\nOne `Textures` objects represents a set of textures that must be\nsimultaneously bound (to different texture units) for use by the same\nprogram. The `Textures` object automatically assigns textures to texture\nunits.\n\nA `Texture` object may also belong to several `Textures` sets at the same\ntime, so that it can be used by several programs.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "textures",
                    "description": "An optional array of OOGL texture objects to\n\tadd to the set. If you specify an empty array or not specify one at all you\n\tcan later add textures using the `add` method.",
                    "type": ".Texture[]",
                    "optional": true
                }
            ],
            "example": [
                "\n\tTODO"
            ]
        },
        "OOGL.Vector2": {
            "name": "OOGL.Vector2",
            "shortname": "OOGL.Vector2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Vector2.js",
            "line": 3,
            "description": "A mutable 2-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector2(2, 3);"
            ]
        },
        "OOGL.Vector3": {
            "name": "OOGL.Vector3",
            "shortname": "OOGL.Vector3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Vector3.js",
            "line": 3,
            "description": "A mutable 3-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector3(3, 4, 5);"
            ]
        },
        "OOGL.Vector4": {
            "name": "OOGL.Vector4",
            "shortname": "OOGL.Vector4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Vector4.js",
            "line": 3,
            "description": "A mutable 4-component vector. This is usually the homogeneous version of a\n3-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The homogeneous W component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector4(3, 4, 5, 1);"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\Ajax.js",
            "line": 13,
            "description": "Lets the user define a callback function that gets called when an error\nrelated to an AJAX request occurs.",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "callback",
                    "description": "A user-defined callback function that gets\n\tcalled in case of an error in an AJAX request.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.onError(function () {\n\t\talert('AJAX error occurred.');\n\t});"
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 62,
            "description": "Performs a GET AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.get('shaders/frag/box.frag', function (source) {\n\t\tfragmentShader = new oogl.FragmentShader(source);\n\t\t// ...\n\t});"
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 80,
            "description": "Performs a GET AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.getJSON('meshes/box.json', function (box) {\n\t\tvertices = new oogl.VertexArray(0, 3, box.vertices);\n\t\ttextureCoordinates = new oogl.VertexArray(1, 2, box.textureCoordinates);\n\t\t// ...\n\t});"
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 99,
            "description": "Performs a POST AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 112,
            "description": "Performs a POST AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "postJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 125,
            "description": "Performs a PUT AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 138,
            "description": "Performs a PUT AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "putJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 151,
            "description": "Performs a DELETE AJAX request. The data returned from the server is\npassed to a user-defined callback function.",
            "itemtype": "method",
            "name": "_delete",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Ajax.js",
            "line": 164,
            "description": "Performs a DELETE AJAX request. The data returned from the server is\nparsed as JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "deleteJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A one-argument user-defined callback function\n\tthat is invoked when the request completes successfully.",
                    "type": "Function"
                }
            ],
            "class": "OOGL.Ajax"
        },
        {
            "file": "src\\Arrays.js",
            "line": 53,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "oogl.AttributeArray1"
        },
        {
            "file": "src\\Arrays.js",
            "line": 71,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "oogl.AttributeArray1"
        },
        {
            "file": "src\\Arrays.js",
            "line": 143,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "oogl.AttributeArray2"
        },
        {
            "file": "src\\Arrays.js",
            "line": 161,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "oogl.AttributeArray2"
        },
        {
            "file": "src\\Arrays.js",
            "line": 233,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray3(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "oogl.AttributeArray3"
        },
        {
            "file": "src\\Arrays.js",
            "line": 251,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "oogl.AttributeArray3"
        },
        {
            "file": "src\\Arrays.js",
            "line": 323,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\nYou may optionally specify `stride` and `offset` parameters.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray4(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "oogl.AttributeArray4"
        },
        {
            "file": "src\\Arrays.js",
            "line": 343,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "oogl.AttributeArray4"
        },
        {
            "file": "src\\Arrays.js",
            "line": 386,
            "description": "Adds a single component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add1",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 403,
            "description": "Adds a 2-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add2",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 420,
            "description": "Adds a 3-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add3",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3('float', [1, 2, 3, 4, 5, 6, 7, 8, 9]);"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 437,
            "description": "Adds a 4-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add4",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 454,
            "description": "Binds each array in the set to its buffer target (which is always\n`gl.ARRAY_BUFFER`) and specifies its pointer for the attribute array\nassociated to its index. This is typically used to prepare all the\narrays used by a program with just one call.\n\nYou may optionally specify `stride` and `offset` parameters.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "TODO",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays();\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.bindAndPointer();\n\tprogram.use();\n\tarrays.drawTriangles();"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 481,
            "description": "Draws the arrays in `gl.TRIANGLES` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLES`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangles();"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 510,
            "description": "Draws the arrays in `gl.TRIANGLE_FAN` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLE_FAN`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangleFan();"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 539,
            "description": "Draws the arrays in `gl.TRIANGLE_STRIP` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLE_STRIP`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangleStrip();"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 568,
            "description": "Deletes all the arrays in the set.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tarrays._delete();"
            ],
            "class": "oogl.AttributeArrays"
        },
        {
            "file": "src\\Arrays.js",
            "line": 620,
            "description": "Draws the elements in `gl.TRIANGLES` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLES`.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the `count` parameter passed to the `ElementArray`\n\tconstructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "oogl.ElementArray"
        },
        {
            "file": "src\\Arrays.js",
            "line": 644,
            "description": "Draws the elements in `gl.TRIANGLE_FAN` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLE_FAN`.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the `count` parameter passed to the `ElementArray`\n\tconstructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "oogl.ElementArray"
        },
        {
            "file": "src\\Arrays.js",
            "line": 668,
            "description": "Draws the elements in `gl.TRIANGLE_STRIP` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLE_STRIP`.",
            "itemtype": "method",
            "name": "drawTriangleStrip",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the `count` parameter passed to the `ElementArray`\n\tconstructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "oogl.ElementArray"
        },
        {
            "file": "src\\Buffers.js",
            "line": 57,
            "description": "Indicates whether this is a valid GL buffer.\n\n`gl.isBuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL buffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (buffer.is()) {\n\t\t// ..."
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 73,
            "description": "Queries a buffer-related parameter.\n\n`gl.getBufferParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar size = buffer.getParameter(oogl.BUFFER_SIZE);"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 88,
            "description": "Queries the size of this buffer.\n\nEquivalent to calling `gl.getBufferParameter` with `gl.BUFFER_SIZE`.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "The size of this buffer.",
                "type": "Number"
            },
            "example": [
                "\n\tvar size = buffer.getSize();"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 102,
            "description": "Queries the usage settings for this buffer.\n\nEquivalent to calling `gl.getBufferParameter` with `gl.BUFFER_USAGE`.",
            "itemtype": "method",
            "name": "getUsage",
            "return": {
                "description": "The usage settings for this buffer; will be one of\n\t`gl.STATIC_DRAW`, `gl.STREAM_DRAW` or `gl.DYNAMIC_DRAW`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar usage = buffer.getUsage();"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 117,
            "description": "Binds this buffer to its target.\n\nEquivalent to calling `gl.bindBuffer` with the target specified to\nthe constructor.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\tbuffer.bind();"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 131,
            "description": "Allocates or specifies buffer data.\n\nEquivalent to calling `gl.bufferData` using the target and usage\nspecified to the constructor.\n\nThe specified argument is either the size to allocate or the data to\nstore; in the latter case it is specified as a standard JavaScript\narray and automatically converted by OOGL to a typed array, depending\non the `type` specified to the constructor.",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "sizeOrData",
                    "description": "Either a number representing the size to\n\tallocate or a JavaScript `Array` containing the data to store.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\tbuffer.data([1, 1, -1, 1, -1, -1, 1, -1]);"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 155,
            "description": "Binds this buffer to its target and then allocates or specifies\nbuffer data.\n\nEquivalent to calling `bind` and `data` subsequently.",
            "itemtype": "method",
            "name": "bindAndData",
            "params": [
                {
                    "name": "sizeOrData",
                    "description": "Either a number representing the size to\n\tallocate or a JavaScript `Array` containing the data to store. See\n\tthe `bind` method.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndData([1, 1, -1, 1, -1, -1, 1, -1]);"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 176,
            "description": "Specifies buffer data.\n\nEquivalent to calling `gl.bufferSubData` with the target specified to\nthe constructor.",
            "itemtype": "method",
            "name": "subData",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to overwrite.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the data to\n\tstore; the array will be automatically converted to a typed array,\n\tdepending on the `type` specified to the constructor.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tbuffer.data([1, 1, -1, 0, 0, 0, 0, 0]);\n\tbuffer.subData(3, [1, -1, -1, 1, -1]); // buffer now contains [1, 1, -1, 1, -1, -1, 1, -1]"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Buffers.js",
            "line": 195,
            "description": "Deletes this buffer.\n\n`gl.deleteBuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tbuffer._delete();"
            ],
            "class": "oogl.Buffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 19,
            "description": "Indicates whether this is a valid GL framebuffer.\n\n`gl.isFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL framebuffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (framebuffer.is()) {\n\t\t// ..."
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 35,
            "description": "TODO\n\n`gl.getAttachmentParameter` equivalent.",
            "itemtype": "method",
            "name": "getAttachmentParameter",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar attachmentType = framebuffer.getAttachmentParameter(oogl.COLOR_ATTACHMENT0, oogl.FRAMEBUFFER_ATTACHMENT_TYPE);"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 51,
            "description": "TODO\n\n`gl.bindFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\tframebuffer.bind();"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 64,
            "description": "TODO\n\n`gl.checkFramebufferStatus` equivalent.",
            "itemtype": "method",
            "name": "checkStatus",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tvar status = framebuffer.checkStatus();"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 78,
            "description": "TODO\n\n`gl.framebufferRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "renderbuffer",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "renderbuffer",
                    "description": "TODO",
                    "type": "WebGLRenderbuffer"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 93,
            "description": "TODO\n\n`gl.framebufferTexture2D` equivalent.",
            "itemtype": "method",
            "name": "texture2D",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "textarget",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "texture",
                    "description": "TODO",
                    "type": "WebGLTexture"
                },
                {
                    "name": "level",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 110,
            "description": "TODO\n\n`gl.deleteFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tframebuffer._delete();"
            ],
            "class": "oogl.Framebuffer"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 29,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `i * 2 + j`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[i * 2 + j] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar determinant = m.get(0, 0) * m.get(1, 1) - m.get(0, 1) * m.get(1, 0);"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 49,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `i * 2 + j`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[i * 2 + j] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([3, 3, 0, 3]);\n\tmatrix.put(1, 0, 3); // now matrix is [3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 71,
            "description": "Transposes this matrix.",
            "itemtype": "method",
            "name": "transpose",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.transpose(); // matrix is now [1, 3, 2, 4]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 88,
            "description": "Computes the transposed matrix and returns it as a new `Matrix2` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getTransposed",
            "return": {
                "description": "The transposed matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.getTransposed(); // m2 is [1, 3, 2, 4], m1 is still [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 102,
            "description": "Adds the specified matrix to this one.\n\nEach element of the specified matrix is added up to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.add(new OOGL.Matrix2([4, 3, 2, 1])); // matrix is now [5, 5, 5, 5]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 122,
            "description": "Adds the specified matrix to this one and returns the sum as a new\n`Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "return": {
                "description": "The sum matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = new OOGL.Matrix2([4, 3, 2, 1]);\n\tvar m3 = m1.plus(m2); // [5, 5, 5, 5]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 142,
            "description": "Subtracts the specified matrix to this one.\n\nEach element of the specified matrix is subtracted to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([5, 5, 5, 5]);\n\tmatrix.subtract(new OOGL.Matrix2([4, 3, 2, 1])); // matrix is now [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 162,
            "description": "Subtracts the specified matrix to this one and returns the difference as\na new `Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "return": {
                "description": "The difference matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([5, 5, 5, 5]);\n\tvar m2 = new OOGL.Matrix2([4, 3, 2, 1]);\n\tvar m3 = m1.minus(m2); // [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 182,
            "description": "Multiplies this matrix by the specified constant factor. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.multiply(2); // matrix is now [2, 4, 6, 8]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 200,
            "description": "Multiplies this matrix by the specified constant factor and returns the\nproduct as a new `Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.by(2); // [2, 4, 6, 8]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 212,
            "description": "Left-multiplies this matrix by the specified `Vector2` object and returns\nthe product as a new `Vector2` object. Neither this matrix nor the\nspecified vector are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([2, 0, 0, 2]);\n\tvar v = new OOGL.Vector2(2, 2);\n\tvar w = m.by(v); // (4, 4)"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 240,
            "description": "Computes the determinant of this matrix.",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "The computed determinant.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar d = m.determinant(); // -2"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 253,
            "description": "Inverts this matrix.",
            "itemtype": "method",
            "name": "invert",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.invert(); // matrix is now [-2, -1, -1.5, -0.5]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 276,
            "description": "Computes the inverse matrix and returns it as a new `Matrix2` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getInverse",
            "return": {
                "description": "The inverse matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.getInverse(); // [-2, -1, -1.5, -0.5]"
            ],
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 297,
            "description": "The 2x2 null matrix.",
            "itemtype": "property",
            "name": "OOGL.Matrix2.NULL",
            "static": 1,
            "type": "OOGL.Matrix2",
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 306,
            "description": "The 2x2 identity matrix.",
            "itemtype": "property",
            "name": "OOGL.Matrix2.IDENTITY",
            "static": 1,
            "type": "OOGL.Matrix2",
            "class": "OOGL.Matrix2"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 28,
            "description": "Yields a new `Matrix4` object corresponding to a homogeneous 4x4 matrix\nequivalent to this matrix.\n\nThe upper left block of the new 4x4 matrix is set using the values from\nthis 3x3 matrix, while the lower right corner is set to 1 and the rest to\n0.",
            "itemtype": "method",
            "name": "toHomogeneous",
            "return": {
                "description": "The homogeneous matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tvar m4 = m3.toHomogeneous();"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 50,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `i * 3 + j`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[i * 3 + j] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tif (m.get(2, 1) == m[7]) { // true\n\t\t..."
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 71,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `i * 3 + j`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[i * 3 + j] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([3, 3, 0, 3, 3, 3, 3, 3, 3]);\n\tmatrix.put(1, 0, 3); // now matrix is [3, 3, 3, 3, 3, 3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 93,
            "description": "Transposes this matrix.",
            "itemtype": "method",
            "name": "transpose",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.transpose(); // matrix is now [1, 3, 2, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 110,
            "description": "Computes the transposed matrix and returns it as a new `Matrix3` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getTransposed",
            "return": {
                "description": "The transposed matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = m1.getTransposed(); // [1, 4, 7, 2, 5, 8, 3, 6, 9]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 124,
            "description": "Adds the specified matrix to this one.\n\nEach element of the specified matrix is added up to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.add(new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1])); // matrix is now [10, 10, 10, 10, 10, 10, 10, 10, 10]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 144,
            "description": "Adds the specified matrix to this one and returns the sum as a new\n`Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "return": {
                "description": "The sum matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n\tvar m3 = m1.plus(m2); // [10, 10, 10, 10, 10, 10, 10, 10, 10]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 164,
            "description": "Subtracts the specified matrix to this one.\n\nEach element of the specified matrix is subtracted to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([10, 10, 10, 10, 10, 10, 10, 10, 10]);\n\tmatrix.subtract(new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1])); // matrix is now [1, 2, 3, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 184,
            "description": "Subtracts the specified matrix to this one and returns the difference as\na new `Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "return": {
                "description": "The difference matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([10, 10, 10, 10, 10, 10, 10, 10, 10]);\n\tvar m2 = new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n\tvar m3 = m1.minus(m2); // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 204,
            "description": "Multiplies this matrix by the specified constant factor. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.multiply(2); // matrix is now [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 222,
            "description": "Multiplies this matrix by the specified constant factor and returns the\nproduct as a new `Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = m1.by(2); // [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 234,
            "description": "Left-multiplies this matrix by the specified `Vector3` object and returns\nthe product as a new `Vector3` object. Neither this matrix nor the\nspecified vector are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([2, 0, 0, 0, 3, 0, 0, 0, 4]);\n\tvar v = new OOGL.Vector3(3, 2, 1);\n\tvar w = m.by(v); // (6, 6, 4)"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 263,
            "description": "Computes the determinant of this matrix.",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "The computed determinant.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar d = m.determinant(); // 0"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 278,
            "description": "Inverts this matrix.",
            "itemtype": "method",
            "name": "invert",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([7, 6, 1, 1, 7, 6, 6, 7, 1]);\n\tmatrix.invert(); // matrix is now [0.5, -0.014, -0.414, -0.5, -0.014,  0.586, 0.5, 0.186, -0.614]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 308,
            "description": "Computes the inverse of this matrix and returns it as a new `Matrix3`\nobject.",
            "itemtype": "method",
            "name": "getInverse",
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([7, 6, 1, 1, 7, 6, 6, 7, 1]);\n\tvar m2 = m1.getInverse(); // [0.5, -0.014, -0.414, -0.5, -0.014,  0.586, 0.5, 0.186, -0.614]"
            ],
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 335,
            "description": "The null 3x3 matrix.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Matrix3",
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 344,
            "description": "The 3x3 identity matrix.",
            "itemtype": "property",
            "name": "IDENTITY",
            "static": 1,
            "type": "OOGL.Matrix3",
            "class": "OOGL.Matrix3"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 29,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `i * 4 + j`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[i * 4 + j] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix4([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]);\n\tif (m.get(2, 3) == m[4]) { // true\n\t\t..."
            ],
            "class": "OOGL.Matrix4"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 50,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `i * 4 + j`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[i * 4 + j] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix4([0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]);\n\tmatrix.put(0, 0, 3); // now matrix is [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix4"
        },
        {
            "file": "src\\Programs.js",
            "line": 28,
            "description": "Queries a program-related parameter.\n\n`gl.getProgramParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tif (!program.getParameter(oogl.LINK_STATUS)) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 45,
            "description": "Attaches the specified shader to this program.\n\n`gl.attachShader` equivalent.",
            "itemtype": "method",
            "name": "attachShader",
            "params": [
                {
                    "name": "shader",
                    "description": "The shader to attach. Can also be an OOGL\n\t`Shader`.",
                    "type": "WebGLShader"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tprogram.linkOrThrow();"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 63,
            "description": "Detaches the specified shader from this program.\n\n`gl.detachShader` equivalent.",
            "itemtype": "method",
            "name": "detachShader",
            "params": [
                {
                    "name": "shader",
                    "description": "The shader to detach. Can also be an OOGL\n\t`Shader`.",
                    "type": "WebGLShader"
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvar program = new oogl.Program();\n\tprogram.attachShader(vertexShader);\n\tprogram.detachShader(vertexShader);"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 81,
            "description": "Returns an array of `WebGLShader` representing the shaders currently\nattached to this program.\n\n`gl.getAttachedShaders` equivalent.",
            "itemtype": "method",
            "name": "getAttachedShaders",
            "return": {
                "description": "An array of the currently attached shaders.",
                "type": "WebGLShader[]"
            },
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tvar shaders = program.getAttachedShaders(); // shaders now contains two elements"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 99,
            "description": "Returns the number of currently attached shaders.\n\nEquivalent to calling `gl.getProgramParameter` with\n`gl.ATTACHED_SHADERS`.",
            "itemtype": "method",
            "name": "getNumberOfAttachedShaders",
            "return": {
                "description": "The number of currently attached shaders.",
                "type": "Number"
            },
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tvar count = program.getNumberOfAttachedShaders(); // 2"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 117,
            "description": "Binds the specified shader attribute variable `name` to the attribute\narray whose `index` is specified.\n\n`gl.bindAttribLocation` equivalent.",
            "itemtype": "method",
            "name": "bindAttribLocation",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the attribute array.",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "The name of the shader attribute variable.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_Color');\n\tprogram.bindAttribLocation(2, 'in_TexCoords');"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 135,
            "description": "Iterates over the specified `attributes` array of strings and binds each\nstring to its index. For example, these calls:\n\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_Color');\n\tprogram.bindAttribLocation(2, 'in_TexCoords');\n\nCan be made only once using `bindAttribLocations` like this:\n\n\tprogram.bindAttribLocations(['in_Vertex', 'in_Color', 'in_TexCoords']);",
            "itemtype": "method",
            "name": "bindAttribLocations",
            "params": [
                {
                    "name": "attributes",
                    "description": "The array, or index-to-string map,\n\tspecifying the names to bind and their respective indices.",
                    "type": "String[]"
                }
            ],
            "example": [
                "\n\tprogram.bindAttribLocations(['in_Vertex', 'in_Color', 'in_TexCoords']);"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 159,
            "description": "Links the program and invalidates the uniform location cache used to\nspeed up uniform operations.\n\n`gl.linkProgram` equivalent.",
            "itemtype": "method",
            "name": "link",
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 177,
            "description": "Returns the link status of this program.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.LINK_STATUS`.",
            "itemtype": "method",
            "name": "getLinkStatus",
            "return": {
                "description": "`true` if the program has been successuflly linked,\n\t`false` otherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 195,
            "description": "Returns the info log generated by the last link operation for this\nprogram.\n\n`gl.getProgramInfoLog` equivalent.",
            "itemtype": "method",
            "name": "getInfoLog",
            "return": {
                "description": "The info log.",
                "type": "String"
            },
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 213,
            "description": "Links the program, invalidates the uniform location cache used to speed\nup uniform operations and checks the link status; throws the info log if\nthe program did not link successfully.",
            "itemtype": "method",
            "name": "linkOrThrow",
            "example": [
                "\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tprogram.linkOrThrow();"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 232,
            "description": "Uses the program in the GL pipeline.\n\n`gl.useProgram` equivalent.",
            "itemtype": "method",
            "name": "use",
            "example": [
                "\n\tprogram.use();"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 245,
            "description": "Validates the program.\n\n`gl.validateProgram` equivalent.",
            "itemtype": "method",
            "name": "validate",
            "example": [
                "\n\tprogram.validate();\n\tif (!program.getValidateStatus()) {\n\t\tthrow 'program validation error';\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 261,
            "description": "Returns the validation status produced by the last validation operation\nfor this program.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.VALIDATE_STATUS`.",
            "itemtype": "method",
            "name": "getValidateStatus",
            "return": {
                "description": "The validation status.",
                "type": "Boolean"
            },
            "example": [
                "\n\tprogram.validate();\n\tif (!program.getValidateStatus()) {\n\t\tthrow 'program validation error';\n\t}"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 279,
            "description": "TODO",
            "itemtype": "method",
            "name": "getActiveAttrib",
            "params": [
                {
                    "name": "index",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "WebGLActiveInfo"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 292,
            "description": "TODO",
            "itemtype": "method",
            "name": "getActiveUniform",
            "params": [
                {
                    "name": "index",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "WebGLActiveInfo"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 305,
            "description": "TODO",
            "itemtype": "method",
            "name": "getAttribLocation",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 318,
            "description": "TODO",
            "itemtype": "method",
            "name": "getUniform",
            "params": [
                {
                    "name": "locationOrName",
                    "description": "TODO",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Mixed"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 336,
            "description": "TODO",
            "itemtype": "method",
            "name": "getUniformLocation",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 351,
            "description": "TODO",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tprogram._delete();"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\Programs.js",
            "line": 362,
            "description": "TODO",
            "itemtype": "method",
            "name": "getDeleteStatus",
            "return": {
                "description": "TODO",
                "type": "Boolean"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Program"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 102,
            "description": "Returns the type of this loop as a string; the return value can\nbe either `'request'` or `'interval'`.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type of this loop; either `'request'` or\n\t`'interval'`.",
                "type": "String"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setType('auto');\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tif (loop.getType() === 'interval') {\n\t\t// apparently rAF is not supported\n\t}"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 122,
            "description": "The frame rate of this loop.\n\nNote that this value is meaningless if `requestAnimationFrame` is\nbeing used by this loop.",
            "itemtype": "method",
            "name": "getRate",
            "return": {
                "description": "The frame rate of this loop.",
                "type": "Number"
            },
            "example": [
                "\n\tvar rate = loop.getRate();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 137,
            "description": "The period of this loop, in milliseconds. It is computed using the formula:\n\n\tperiod = Math.floor(1000 / rate);\n\nThis value is also used in `setInterval`-based loops.",
            "itemtype": "method",
            "name": "getPeriod",
            "return": {
                "description": "The period of this loop, in milliseconds.",
                "type": "Number"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setRate(100);\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tvar period = loop.getPeriod(); // 10"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 157,
            "description": "Returns the _actual_ frame rate for this loop. This is\npotentially different from the value returned by `getRate`\nbecause the former is the measured frame rate while the latter is\nthe rate manually set using the static `setRate` method.\n\nThe actual frame rate is measured as the number of loop\niterations since the last time `getActualFrameRate` was called\ndivided by the timespan.\n\nThe measuring system automatically discards time spans during\nwhich the loop was suspended.",
            "itemtype": "method",
            "name": "getActualRate",
            "return": {
                "description": "The measured actual frame rate.",
                "type": "Number"
            },
            "example": [
                "\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tloop.start();\n\tsetInterval(function () {\n\t\trateDisplay.innerText = loop.getActualRate();\n\t}, 1000);"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 194,
            "description": "Starts the loop.",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tloop.start();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 212,
            "description": "Suspends the execution of the loop. There is no effect if the\nloop is not running.",
            "itemtype": "method",
            "name": "suspend",
            "example": [
                "\n\tloop.suspend();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 228,
            "description": "Resume the execution of the loop. There is no effect if the loop\nhas not been previously suspended by the `suspend` method.",
            "itemtype": "method",
            "name": "resume",
            "example": [
                "\n\tloop.resume();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 244,
            "description": "Permanently stops the execution of the loop, whether it is\nsuspended or not. There is no effect if the loop has not been\nstarted yet.\n\nThe execution of this render loop cannot be restarted after it\nhas been stopped.",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n\tloop.stop();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 265,
            "description": "Indicates whether `requestAnimationFrame` is supported.",
            "itemtype": "method",
            "name": "isRequestAnimationFrameSupported",
            "static": 1,
            "return": {
                "description": "`true` if `requestAnimationFrame` is supported, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (OOGL.RenderLoop.isRequestAnimationFrameSupported()) {\n\t\tOOGL.RenderLoop.setType('request');\n\t} else {\n\t\tthrow 'requestAnimationFrame not supported';\n\t}"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 283,
            "description": "TODO",
            "itemtype": "method",
            "name": "getType",
            "static": 1,
            "return": {
                "description": "TODO",
                "type": "String"
            },
            "example": [
                "\n\tvar currentType = RenderLoop.getType();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 296,
            "description": "TODO",
            "itemtype": "method",
            "name": "setType",
            "static": 1,
            "params": [
                {
                    "name": "newType",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tRenderLoop.setType('request');"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 317,
            "description": "TODO",
            "itemtype": "method",
            "name": "getRate",
            "static": 1,
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tvar currentRate = RenderLoop.getRate();"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 330,
            "description": "TODO",
            "itemtype": "method",
            "name": "getPeriod",
            "static": 1,
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setRate(100);\n\tvar period = OOGL.RenderLoop.getPeriod(); // 10"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 344,
            "description": "TODO",
            "itemtype": "method",
            "name": "setRate",
            "static": 1,
            "params": [
                {
                    "name": "newRate",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tRenderLoop.setRate(100);"
            ],
            "class": "OOGL.RenderLoop"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 19,
            "description": "Indicates whether this is a valid GL renderbuffer.\n\n`gl.isRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` is this is a valid GL renderbuffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (renderbuffer.is()) {\n\t\t// ..."
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 35,
            "description": "Queries a renderbuffer-related parameter.\n\n`gl.getRenderbufferParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Mixed"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 50,
            "description": "TODO",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 62,
            "description": "TODO",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 74,
            "description": "TODO",
            "itemtype": "method",
            "name": "getInternalFormat",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 86,
            "description": "TODO",
            "itemtype": "method",
            "name": "getRedSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 98,
            "description": "TODO",
            "itemtype": "method",
            "name": "getGreenSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 110,
            "description": "TODO",
            "itemtype": "method",
            "name": "getBlueSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 122,
            "description": "TODO",
            "itemtype": "method",
            "name": "getAlphaSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 134,
            "description": "TODO",
            "itemtype": "method",
            "name": "getDepthSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 146,
            "description": "TODO",
            "itemtype": "method",
            "name": "getStencilSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 158,
            "description": "Binds this renderbuffer.\n\n`gl.bindRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\trenderbuffer.bind();"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 171,
            "description": "TODO",
            "itemtype": "method",
            "name": "storage",
            "params": [
                {
                    "name": "internalFormat",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 185,
            "description": "Deletes this renderbuffer.\n\n`gl.deleteRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\trenderbuffer._delete();"
            ],
            "class": "oogl.Renderbuffer"
        },
        {
            "file": "src\\Shaders.js",
            "line": 19,
            "description": "Queries a shader-related parameter.\n\n`gl.getShaderParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The parameter name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar shaderType = shader.getParameter(oogl.SHADER_TYPE);"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 34,
            "description": "Returns the type of this shader, which is either `gl.VERTEX_SHADER` or\n`gl.FRAGMENT_SHADER`.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.SHADER_TYPE`.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type of this shader.",
                "type": "Number"
            },
            "example": [
                "\n\tvar shaderType = shader.getType();"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 49,
            "description": "Specifies the GLSL source code for this shader.\n\n`gl.shaderSource` equivalent.",
            "itemtype": "method",
            "name": "source",
            "params": [
                {
                    "name": "source",
                    "description": "The GLSL source code.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tshader.source(vertexSource);"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 64,
            "description": "Returns the GLSL source code for this shader.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.SHADER_SOURCE`.",
            "itemtype": "method",
            "name": "getSource",
            "return": {
                "description": "The GLSL source code.",
                "type": "String"
            },
            "example": [
                "\n\tvar vertexSource = vertexShader.getSource();"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 78,
            "description": "Compiles this shader.\n\n`gl.compileShader` equivalent.",
            "itemtype": "method",
            "name": "compile",
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 95,
            "description": "Returns the compile status produced by the last compile operation for\nthis shader.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.COMPILE_STATUS`.",
            "itemtype": "method",
            "name": "getCompileStatus",
            "return": {
                "description": "`true` if the shader was compiled successfully, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 115,
            "description": "Returns the info log produced by the last compile operation for this\nshader.\n\n`gl.getShaderInfoLog` equivalent.",
            "itemtype": "method",
            "name": "getInfoLog",
            "return": {
                "description": "The info log.",
                "type": "String"
            },
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 134,
            "description": "Compiles this shader, throws the info log if the shader does not compile\nsuccessfully.",
            "itemtype": "method",
            "name": "compileOrThrow",
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compileOrThrow();"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 150,
            "description": "Deletes this shader.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tshader._delete();"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Shaders.js",
            "line": 161,
            "description": "Returns the delete status for this shader.",
            "itemtype": "method",
            "name": "getDeleteStatus",
            "return": {
                "description": "`true` if the shader has been deleted, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (shader.getDeleteStatus()) {\n\t\tthrow 'The shader has been deleted.';\n\t}"
            ],
            "class": "oogl.Shader"
        },
        {
            "file": "src\\Textures.js",
            "line": 23,
            "description": "Indicates whether this is a valid GL texture.\n\n`gl.isTexture` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL texture, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (texture.is()) {\n\t\t// ..."
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 39,
            "description": "Binds this texture to its target.\n\n`gl.bindTexture` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\ttexture.bind();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 52,
            "description": "Queries a texture-related parameter.\n\n`gl.getTexParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar wrapS = texture.getParameter(oogl.TEXTURE_WRAP_S);"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 67,
            "description": "Queries the \"min filter\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_MIN_FILTER`.",
            "itemtype": "method",
            "name": "getMinFilter",
            "return": {
                "description": "The \"min filter\" parameter; one of `gl.NEAREST`,\n\t`gl.LINEAR`, `gl.NEAREST_MIPMAP_NEAREST`, `gl.LINEAR_MIPMAP_NEAREST`,\n\t`gl.NEAREST_MIPMAP_LINEAR` or `gl.LINEAR_MIPMAP_LINEAR`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar minFilter = texture.getMinFilter();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 83,
            "description": "Queries the \"mag filter\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_MAG_FILTER`.",
            "itemtype": "method",
            "name": "getMagFilter",
            "return": {
                "description": "The \"mag filter\" parameter; one of `gl.NEAREST`,\n\t`gl.LINEAR`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar magFilter = texture.getMagFilter();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 98,
            "description": "Queries the \"wrap S\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_WRAP_S`.",
            "itemtype": "method",
            "name": "getWrapS",
            "return": {
                "description": "The \"wrap S\" parameter; one of `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar wrapS = texture.getWrapS();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 114,
            "description": "Queries the \"wrap T\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_WRAP_T`.",
            "itemtype": "method",
            "name": "getWrapT",
            "return": {
                "description": "The \"wrap T\" parameter; one of `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar wrapT = texture.getWrapT();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 129,
            "description": "TODO",
            "itemtype": "method",
            "name": "parameterf",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 142,
            "description": "TODO",
            "itemtype": "method",
            "name": "parameteri",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 155,
            "description": "TODO\n\n`gl.generateMipmap` equivalent.",
            "itemtype": "method",
            "name": "generateMipmap",
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 168,
            "description": "TODO",
            "itemtype": "method",
            "name": "image2D",
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 179,
            "description": "TODO",
            "itemtype": "method",
            "name": "subImage2D",
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 190,
            "description": "TODO\n\n`gl.copyTexImage2D` equivalent.",
            "itemtype": "method",
            "name": "copyImage2D",
            "params": [
                {
                    "name": "level",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "internalFormat",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "border",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 210,
            "description": "TODO\n\n`gl.copyTexSubImage2D` equivalent.",
            "itemtype": "method",
            "name": "copySubImage2D",
            "params": [
                {
                    "name": "level",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "xoffset",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 230,
            "description": "Deletes this texture.\n\n`gl.deleteTexture` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\ttexture._delete();"
            ],
            "class": "oogl.Texture"
        },
        {
            "file": "src\\Textures.js",
            "line": 298,
            "description": "Adds a `Texture` to this set.\n\nThe texture is automatically assigned a texture unit, but the set\nmust be re-bound (using the `bind` method) before its textures can be\nused in programs.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "texture",
                    "description": "The OOGL texture to add.",
                    "type": ".Texture"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Textures"
        },
        {
            "file": "src\\Textures.js",
            "line": 314,
            "description": "Binds all the textures in this sets to their target in their\nrespective texture unit.\n\nEquivalent to calling `gl.activeTexture` and `gl.bindTexture` for\neach texture.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Textures"
        },
        {
            "file": "src\\Textures.js",
            "line": 332,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniform",
            "params": [
                {
                    "name": "program",
                    "description": "TODO",
                    "type": ".Program"
                },
                {
                    "name": "names",
                    "description": "TODO",
                    "type": "String[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Textures"
        },
        {
            "file": "src\\Textures.js",
            "line": 347,
            "description": "Deletes all the textures that have been added to this set and resets\nit to an empty set.\n\n`Textures` objects may be used again after deletion.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tTODO"
            ],
            "class": "oogl.Textures"
        },
        {
            "file": "src\\Vector2.js",
            "line": 14,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 22,
            "description": "The Y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 32,
            "description": "Computes the modulus of the vector. This is computed as\n`Math.sqrt(x * x + y * y)`.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The computed value.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tvar l = v.length(); // 5"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 46,
            "description": "Normalizes this vector so that its length becomes 1.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.normalize(); // v is now (0.6, 0.8)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 62,
            "description": "Computes the normalized vector and returns it as a new `Vector2` object.\nThis vector is not changed.",
            "itemtype": "method",
            "name": "getNormalized",
            "return": {
                "description": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = v1.getNormalized(); // (0.6, 0.8)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 77,
            "description": "Adds the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.add(new OOGL.Vector2(1, 2)); // v is now (4, 6)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 93,
            "description": "Adds the specified 2-component vector to this one and returns the sum as\na new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The sum vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = new OOGL.Vector2(1, 2);\n\tvar v3 = v1.plus(v2); // (4, 6)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 109,
            "description": "Subtracts the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.subtract(new OOGL.Vector2(1, 2)); // v is now (2, 2)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 125,
            "description": "Subtracts the specified 2-component vector to this one and returns the\ndifference as a new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The difference vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector(3, 4);\n\tvar v2 = new OOGL.Vector2(1, 2);\n\tvar v3 = v1.minus(v2); // (2, 2)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 141,
            "description": "Multiplies this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector(3, 4);\n\tv.multiply(2); // v is now (6, 8)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 157,
            "description": "Divides this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector(6, 8);\n\tv.multiply(2); // v is now (3, 4)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 173,
            "description": "Multiplies this vector by the specified constant factor and returns the\nproduct as a new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = v1.by(2); // (6, 8)"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 188,
            "description": "Computes the dot product between this vector and the specified one.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v",
                    "description": "The other vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The computed dot product.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(1, 2);\n\tvar v2 = new OOGL.Vector2(3, 4);\n\tvar dot = v1.dot(v2); // 11"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 203,
            "description": "Reflects this vector against a line whose normal vector is specified. The\nreflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "reflect",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvelocity.reflect(new OOGL.Vector2(0, 1));"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 227,
            "description": "Computes the reflection of this vector against a line whose normal vector\nis specified. The reflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThe computed vector is returned as a new `Vector2` object, this vector is\nnot changed.",
            "itemtype": "method",
            "name": "getReflected",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The computed reflected vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvar newVelocity = velocity.getReflected(new OOGL.Vector2(0, 1));"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 250,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "refract",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector2"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector2(0.3, -1);\n\tvar n = new OOGL.Vector2(0, 1);\n\tv.refract(n, 1.3);"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 278,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices; the computed vector is returned as a new\n`OOGL.Vector2` object, this object is not changed.",
            "itemtype": "method",
            "name": "getRefracted",
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector2"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The refracted vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector2(0.3, -1);\n\tvar n = new OOGL.Vector2(0, 1);\n\tvar w = v.getRefracted(n, 1.3);"
            ],
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 306,
            "description": "The null vector `(0, 0)`.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Vector2",
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 315,
            "description": "The `(1, 0)` vector.",
            "itemtype": "property",
            "name": "I",
            "static": 1,
            "type": "OOGL.Vector2",
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector2.js",
            "line": 324,
            "description": "The `(0, 1)` vector.",
            "itemtype": "property",
            "name": "J",
            "static": 1,
            "type": "OOGL.Vector2",
            "class": "OOGL.Vector2"
        },
        {
            "file": "src\\Vector3.js",
            "line": 15,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 23,
            "description": "The Y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 31,
            "description": "The Z component.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 41,
            "description": "Creates a homogeneous version of this vector by adding a unitary `w`\ncoordinate and returns it as a new `Vector4` object. This vector is not\nchanged.",
            "itemtype": "method",
            "name": "toHomogeneous",
            "return": {
                "description": "A homogeneous vector corresponding to this vector.",
                "type": "OOGL.Vector4"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 3);\n\tvar w = v.toHomogeneous(); // (1, 2, 3, 1)"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 56,
            "description": "Computes the modulus of the vector. This is computed as\n`Math.sqrt(x * x + y * y + z * z)`.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The computed value.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 2);\n\tvar l = v.length(); // 3"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 70,
            "description": "Normalizes this vector so that its length becomes 1.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 2);\n\tv.normalize(); // v is now (0.33, 0.66, 0.66)"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 87,
            "description": "Computes the normalized vector and returns it as a new `Vector3` object.\nThis vector is not changed.",
            "itemtype": "method",
            "name": "getNormalized",
            "return": {
                "description": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(1, 2, 2);\n\tvar v2 = v1.getNormalized(); // (0.33, 0.66, 0.66)"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 102,
            "description": "Adds the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(4, 5, 6);\n\tv.add(new OOGL.Vector3(1, 2, 3)); // v is now (5, 7, 9)"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector3.js",
            "line": 119,
            "description": "Adds the specified 2-component vector to this one and returns the sum as\na new `Vector3` object. This vector is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The sum vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(4, 5, 6);\n\tvar v2 = new OOGL.Vector3(1, 2, 3);\n\tvar v3 = v1.plus(v2); // (5, 7, 9)"
            ],
            "class": "OOGL.Vector3"
        },
        {
            "file": "src\\Vector4.js",
            "line": 17,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector4"
        },
        {
            "file": "src\\Vector4.js",
            "line": 25,
            "description": "The y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector4"
        },
        {
            "file": "src\\Vector4.js",
            "line": 33,
            "description": "The Z component.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "OOGL.Vector4"
        },
        {
            "file": "src\\Vector4.js",
            "line": 41,
            "description": "The homogeneous W component.",
            "itemtype": "property",
            "name": "w",
            "type": "Number",
            "class": "OOGL.Vector4"
        },
        {
            "file": "src\\Vector4.js",
            "line": 51,
            "description": "Converts this homogeneous vector to a 3-component standard vector\ndividing the X, Y and Z components by the W component. This method\nproduces a new `OOGL.Vector3` object, while this vector is not changed.",
            "itemtype": "method",
            "name": "toStandard",
            "return": {
                "description": "The computed standard vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar w = new OOGL.Vector4(2, 4, 6, 2);\n\tvar v = w.toStandard(); // v is (1, 2, 3)"
            ],
            "class": "OOGL.Vector4"
        }
    ],
    "warnings": []
}