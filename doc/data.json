{
    "project": {
        "name": "OOGL.js",
        "description": "A thin object oriented layer above WebGL.",
        "version": "1.0.0",
        "url": "http://www.oogljs.com/"
    },
    "files": {
        "src\\Ajax.js": {
            "name": "src\\Ajax.js",
            "modules": {},
            "classes": {
                "OOGL.Ajax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Arrays.js": {
            "name": "src\\Arrays.js",
            "modules": {},
            "classes": {
                "context.AttributeArray1": 1,
                "context.AttributeArray2": 1,
                "context.AttributeArray3": 1,
                "context.AttributeArray4": 1,
                "context.AttributeArrays": 1,
                "context.ElementArray": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Buffers.js": {
            "name": "src\\Buffers.js",
            "modules": {},
            "classes": {
                "context.Buffer": 1,
                "context.StaticBuffer": 1,
                "context.StreamBuffer": 1,
                "context.DynamicBuffer": 1,
                "context.ArrayBuffer": 1,
                "context.ElementArrayBuffer": 1,
                "context.StaticArrayBuffer": 1,
                "context.StaticElementArrayBuffer": 1,
                "context.StreamArrayBuffer": 1,
                "context.StreamElementArrayBuffer": 1,
                "context.DynamicArrayBuffer": 1,
                "context.DynamicElementArrayBuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\ContextBegin.js": {
            "name": "src\\ContextBegin.js",
            "modules": {},
            "classes": {
                "OOGL.Context": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Framebuffer.js": {
            "name": "src\\Framebuffer.js",
            "modules": {},
            "classes": {
                "context.Framebuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Loader.js": {
            "name": "src\\Loader.js",
            "modules": {},
            "classes": {
                "OOGL.Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix2.js": {
            "name": "src\\Matrix2.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix2": 1,
                "OOGL.RotationMatrix2": 1,
                "OOGL.ScalingMatrix2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix3.js": {
            "name": "src\\Matrix3.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix3": 1,
                "OOGL.RotationMatrix3": 1,
                "OOGL.XRotationMatrix3": 1,
                "OOGL.YRotationMatrix3": 1,
                "OOGL.ZRotationMatrix3": 1,
                "OOGL.ScalingMatrix3": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Matrix4.js": {
            "name": "src\\Matrix4.js",
            "modules": {},
            "classes": {
                "OOGL.Matrix4": 1,
                "OOGL.TranslationMatrix4": 1,
                "OOGL.RotationMatrix4": 1,
                "OOGL.XRotationMatrix4": 1,
                "OOGL.YRotationMatrix4": 1,
                "OOGL.ZRotationMatrix4": 1,
                "OOGL.ScalingMatrix4": 1,
                "OOGL.OrthogonalProjection": 1,
                "OOGL.IsometricProjection": 1,
                "OOGL.PerspectiveProjection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\OOGL.js": {
            "name": "src\\OOGL.js",
            "modules": {
                "OOGL": 1,
                "context": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\Programs.js": {
            "name": "src\\Programs.js",
            "modules": {},
            "classes": {
                "context.Program": 1,
                "context.AutoProgram": 1,
                "context.AjaxProgram": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\RenderLoop.js": {
            "name": "src\\RenderLoop.js",
            "modules": {},
            "classes": {
                "OOGL.RenderLoop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Renderbuffer.js": {
            "name": "src\\Renderbuffer.js",
            "modules": {},
            "classes": {
                "context.Renderbuffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Shaders.js": {
            "name": "src\\Shaders.js",
            "modules": {},
            "classes": {
                "context.Shader": 1,
                "context.VertexShader": 1,
                "context.FragmentShader": 1,
                "context.AjaxVertexShader": 1,
                "context.AjaxFragmentShader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Textures.js": {
            "name": "src\\Textures.js",
            "modules": {},
            "classes": {
                "context.Texture": 1,
                "context.Texture2D": 1,
                "context.AutoTexture": 1,
                "context.AsyncTexture": 1,
                "context.CubeMap": 1,
                "context.AsyncCubeMap": 1,
                "context.Textures": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Timing.js": {
            "name": "src\\Timing.js",
            "modules": {},
            "classes": {
                "OOGL.Timing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector2.js": {
            "name": "src\\Vector2.js",
            "modules": {},
            "classes": {
                "OOGL.Vector2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector3.js": {
            "name": "src\\Vector3.js",
            "modules": {},
            "classes": {
                "OOGL.Vector3": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Vector4.js": {
            "name": "src\\Vector4.js",
            "modules": {},
            "classes": {
                "OOGL.Vector4": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "OOGL": {
            "name": "OOGL",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "OOGL.Timing": 1,
                "OOGL.Ajax": 1,
                "OOGL.Context": 1,
                "OOGL.Matrix2": 1,
                "OOGL.RotationMatrix2": 1,
                "OOGL.ScalingMatrix2": 1,
                "OOGL.Matrix3": 1,
                "OOGL.RotationMatrix3": 1,
                "OOGL.XRotationMatrix3": 1,
                "OOGL.YRotationMatrix3": 1,
                "OOGL.ZRotationMatrix3": 1,
                "OOGL.ScalingMatrix3": 1,
                "OOGL.Matrix4": 1,
                "OOGL.TranslationMatrix4": 1,
                "OOGL.RotationMatrix4": 1,
                "OOGL.XRotationMatrix4": 1,
                "OOGL.YRotationMatrix4": 1,
                "OOGL.ZRotationMatrix4": 1,
                "OOGL.ScalingMatrix4": 1,
                "OOGL.OrthogonalProjection": 1,
                "OOGL.IsometricProjection": 1,
                "OOGL.PerspectiveProjection": 1,
                "OOGL.RenderLoop": 1,
                "OOGL.Vector2": 1,
                "OOGL.Vector3": 1,
                "OOGL.Vector4": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\Vector4.js",
            "line": 7,
            "description": "This is OOGL's main namespace object and contains all the OOGL classes.\n\nSome OOGL-specific class constructors are contained in this object. For\nexample, to create an `OOGL.RenderLoop` object you construct it in this way:\n\n\tvar loop = new OOGL.RenderLoop( ... );\n\nThe `OOGL` object may also be invoked as a function, in which it expectes\nexactly one function argument which is a user-defined callback function that\ngets invoked as soon as the DOM of the page has loaded (this is accomplished\nusing the `DOMCOntentLoaded` JavaScript event):\n\n\tOOGL(function () {\n\t\t// here the DOM has fully loaded\n\t});\n\nThis is typically the right place to put WebGL/OOGL initialization code, such\nas GLSL shader and other asset loading code, as well as GLSL program\ncompilation and linking.",
            "itemtype": "main"
        },
        "context": {
            "name": "context",
            "submodules": {},
            "classes": {
                "context.AttributeArray1": 1,
                "context.AttributeArray2": 1,
                "context.AttributeArray3": 1,
                "context.AttributeArray4": 1,
                "context.AttributeArrays": 1,
                "context.ElementArray": 1,
                "context.Buffer": 1,
                "context.StaticBuffer": 1,
                "context.StreamBuffer": 1,
                "context.DynamicBuffer": 1,
                "context.ArrayBuffer": 1,
                "context.ElementArrayBuffer": 1,
                "context.StaticArrayBuffer": 1,
                "context.StaticElementArrayBuffer": 1,
                "context.StreamArrayBuffer": 1,
                "context.StreamElementArrayBuffer": 1,
                "context.DynamicArrayBuffer": 1,
                "context.DynamicElementArrayBuffer": 1,
                "context.Framebuffer": 1,
                "OOGL.Loader": 1,
                "context.Program": 1,
                "context.AutoProgram": 1,
                "context.AjaxProgram": 1,
                "context.Renderbuffer": 1,
                "context.Shader": 1,
                "context.VertexShader": 1,
                "context.FragmentShader": 1,
                "context.AjaxVertexShader": 1,
                "context.AjaxFragmentShader": 1,
                "context.Texture": 1,
                "context.Texture2D": 1,
                "context.AutoTexture": 1,
                "context.AsyncTexture": 1,
                "context.CubeMap": 1,
                "context.AsyncCubeMap": 1,
                "context.Textures": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\Textures.js",
            "line": 525,
            "description": "This is actually a _pseudo_-module used to document OOGL classes whose\nnamespace is a WebGL/OOGL context instance.\n\nYou can get a `context` object by invoking the `OOGL.Context` constructor:\n\n\tvar context = new OOGL.Context(canvas);\n\nYou can then use that object to construct context-specific objects, such as\n`Texture2D` objects:\n\n\tvar texture = new context.Texture2D();\n\nThe `context` object is sometimes referred to with the `oogl` name because it\nis a normal `WebGLContext` object containing all the standard WebGL features,\nsuch as `createTexture`, `createShader`, `flush` and so on, plus\nOOGL-specific features such as `Texture2D`.",
            "itemtype": "main"
        }
    },
    "classes": {
        "OOGL.Ajax": {
            "name": "OOGL.Ajax",
            "shortname": "OOGL.Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Ajax.js",
            "line": 7,
            "description": "Provides methods for performing AJAX requests. Useful for loading assets such\nas shaders.",
            "static": 1
        },
        "context.AttributeArray1": {
            "name": "context.AttributeArray1",
            "shortname": "context.AttributeArray1",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 7,
            "description": "Creates an array buffer with static draw usage representing a single\ncomponent vertex attribute array.\n\nThe attribute array is associated to the specified `index`: the provided\n`enable` and `disable` methods enable and disable the `index`-th attribute\narray calling `gl.enableVertexAttribArray` and `gl.disableVertexAttribArray`\nand the provided `pointer` method invokes `gl.vertexAttribPointer` with the\nspecified `index` and `type`.",
            "extends": "context.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` or `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the array data; it\n\twill be automatically converted to a typed array.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether the elements of the\n\tarray must be automatically normalized by the GL (see the explanation for\n\tthe equivalent argument in `gl.vertexAttribPointer`).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray1(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "context.AttributeArray2": {
            "name": "context.AttributeArray2",
            "shortname": "context.AttributeArray2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 160,
            "description": "Creates an array buffer with static draw usage representing a 2-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the provided\n`enable` and `disable` methods enable and disable the `index`-th attribute\narray calling `gl.enableVertexAttribArray` and `gl.disableVertexAttribArray`\nand the provided `pointer` method invokes `gl.vertexAttribPointer` with the\nspecified `index` and `type`.",
            "extends": "context.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` or `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the array data; it\n\twill be automatically converted to a typed array.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether the elements of the\n\tarray must be automatically normalized by the GL (see the explanation for\n\tthe equivalent argument in `gl.vertexAttribPointer`).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray2(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "context.AttributeArray3": {
            "name": "context.AttributeArray3",
            "shortname": "context.AttributeArray3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 313,
            "description": "Creates an array buffer with static draw usage representing a 3-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the provided\n`enable` and `disable` methods enable and disable the `index`-th attribute\narray calling `gl.enableVertexAttribArray` and `gl.disableVertexAttribArray`\nand the provided `pointer` method invokes `gl.vertexAttribPointer` with the\nspecified `index` and `type`.",
            "extends": "context.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` or `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the array data; it\n\twill be automatically converted to a typed array.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether the elements of the\n\tarray must be automatically normalized by the GL (see the explanation for\n\tthe equivalent argument in `gl.vertexAttribPointer`).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray3(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "context.AttributeArray4": {
            "name": "context.AttributeArray4",
            "shortname": "context.AttributeArray4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 466,
            "description": "Creates an array buffer with static draw usage representing a 4-component\nvertex attribute array.\n\nThe attribute array is associated to the specified `index`: the provided\n`enable` and `disable` methods enable and disable the `index`-th attribute\narray calling `gl.enableVertexAttribArray` and `gl.disableVertexAttribArray`\nand the provided `pointer` method invokes `gl.vertexAttribPointer` with the\nspecified `index` and `type`.",
            "extends": "context.StaticArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "index",
                    "description": "The attribute array index.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` or `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the array data; it\n\twill be automatically converted to a typed array.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether the elements of the\n\tarray must be automatically normalized by the GL (see the explanation for\n\tthe equivalent argument in `gl.vertexAttribPointer`).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray4(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ]
        },
        "context.AttributeArrays": {
            "name": "context.AttributeArrays",
            "shortname": "context.AttributeArrays",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 621,
            "description": "Represents a set of vertex attribute arrays; simplifies the management of\nmultiple arrays.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "count",
                    "description": "The number of vertex attributes each array will\n\tcontain.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays(vertices.length / 3);\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.bindAndPointer();\n\tprogram.use();\n\tarrays.drawTriangles();"
            ]
        },
        "context.ElementArray": {
            "name": "context.ElementArray",
            "shortname": "context.ElementArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Arrays.js",
            "line": 1205,
            "description": "Represents an element array.\n\nThis class inherits `StaticElementArrayBuffer` and introduces utility\nmethods.",
            "extends": "context.StaticElementArrayBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "indices",
                    "description": "The element indices.",
                    "type": "Number[]"
                },
                {
                    "name": "type",
                    "description": "The type of each index. It can be either\n`'ubyte'` or `'ushort'` and defaults to `'ushort'` so that indices greater\n\tthan `255` are not wrapped to the `0-255` range.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'ushort'"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays();\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.bindAndPointer();\n\tvar elements = new oogl.ElementArray(indices);\n\telements.bind();\n\tprogram.use();\n\telements.drawTriangles();"
            ]
        },
        "context.Buffer": {
            "name": "context.Buffer",
            "shortname": "context.Buffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 7,
            "description": "Wraps a GL buffer with a specified target, data type and usage settings.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createBuffer`. The returned `WebGLBuffer` object is extended by\nOOGL-specific features and returned by the `Buffer` constructor.",
            "extends": "WebGLBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar buffer = new oogl.Buffer(oogl.ARRAY_BUFFER, 'float', oogl.STATIC_DRAW);"
            ]
        },
        "context.StaticBuffer": {
            "name": "context.StaticBuffer",
            "shortname": "context.StaticBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 216,
            "description": "Wraps a GL buffer whose usage is set to `gl.STATIC_DRAW`.",
            "extends": "context.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "context.StreamBuffer": {
            "name": "context.StreamBuffer",
            "shortname": "context.StreamBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 234,
            "description": "Wraps a GL buffer whose usage is set to `gl.STREAM_DRAW`.",
            "extends": "context.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "context.DynamicBuffer": {
            "name": "context.DynamicBuffer",
            "shortname": "context.DynamicBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 252,
            "description": "Wraps a GL buffer whose usage is set to `gl.DYNAMIC_DRAW`.",
            "extends": "context.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this buffer will be bound\n\twhen the provided `bind` method is used. Either `gl.ARRAY_BUFFER` or\n\t`gl.ELEMENT_ARRAY_BUFFER`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicBuffer(oogl.ARRAY_BUFFER, 'float');"
            ]
        },
        "context.ArrayBuffer": {
            "name": "context.ArrayBuffer",
            "shortname": "context.ArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 271,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER`.",
            "extends": "context.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.ArrayBuffer('float', oogl.STATIC_DRAW);"
            ]
        },
        "context.ElementArrayBuffer": {
            "name": "context.ElementArrayBuffer",
            "shortname": "context.ElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 289,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER`.",
            "extends": "context.Buffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                },
                {
                    "name": "usage",
                    "description": "One of `gl.STATIC_DRAW`, `gl.STREAM_DRAW` or\n\t`gl.DYNAMIC_DRAW`; will be used when calling `gl.bufferData` through the\n\tprovided `data` method.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.ElementArrayBuffer('float', oogl.STATIC_DRAW);"
            ]
        },
        "context.StaticArrayBuffer": {
            "name": "context.StaticArrayBuffer",
            "shortname": "context.StaticArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 307,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.STATIC_DRAW`.",
            "extends": "context.StaticBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticArrayBuffer('float');"
            ]
        },
        "context.StaticElementArrayBuffer": {
            "name": "context.StaticElementArrayBuffer",
            "shortname": "context.StaticElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 323,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.STATIC_DRAW`.",
            "extends": "context.StaticBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StaticElementArrayBuffer('float');"
            ]
        },
        "context.StreamArrayBuffer": {
            "name": "context.StreamArrayBuffer",
            "shortname": "context.StreamArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 339,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.STREAM_DRAW`.",
            "extends": "context.StreamBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamArrayBuffer('float');"
            ]
        },
        "context.StreamElementArrayBuffer": {
            "name": "context.StreamElementArrayBuffer",
            "shortname": "context.StreamElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 355,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.STREAM_DRAW`.",
            "extends": "context.StreamBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.StreamElementArrayBuffer('float');"
            ]
        },
        "context.DynamicArrayBuffer": {
            "name": "context.DynamicArrayBuffer",
            "shortname": "context.DynamicArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 371,
            "description": "Wraps a GL buffer whose target is set to `gl.ARRAY_BUFFER` and usage to\n`gl.DYNAMIC_DRAW`.",
            "extends": "context.DynamicBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicArrayBuffer('float');"
            ]
        },
        "context.DynamicElementArrayBuffer": {
            "name": "context.DynamicElementArrayBuffer",
            "shortname": "context.DynamicElementArrayBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Buffers.js",
            "line": 387,
            "description": "Wraps a GL buffer whose target is set to `gl.ELEMENT_ARRAY_BUFFER` and usage\nto `gl.DYNAMIC_DRAW`.",
            "extends": "context.DynamicBuffer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "One of `byte`, `ubyte`, `short`, `ushort` and `float`;\n\tindicates the type of the data that will be put in the buffer.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar buffer = new oogl.DynamicElementArrayBuffer('float');"
            ]
        },
        "OOGL.Context": {
            "name": "OOGL.Context",
            "shortname": "OOGL.Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\ContextBegin.js",
            "line": 5,
            "description": "Requests a new WebGL context on the specified canvas and wraps it in a new\nOOGL object. An exception is thrown if WebGL is not supported or the GPU is\nblacklisted.\n\nThe constructed OOGL object extends a normal WebGL rendering context, so you\ncan use all the GL properties and functions just like you were using a normal\n`gl` object returned by `canvas.getContext('webgl')`:\n\n\tvar oogl = new OOGL.Context('canvas');\n\toogl.clearColor(0, 0, 0, 1);\n\toogl.clear(oogl.COLOR_BUFFER_BIT);\n\toogl.flush();\n\nFurthermore the OOGL object includes OOGL-specific subclasses like `Program`\nand `Shader`, so that you can say, for example:\n\n\tvar fragmentShader = new oogl.Shader(oogl.FRAGMENT_SHADER);\n\tfragmentShader.source(fragmentSource);\n\tfragmentShader.compile();\n\tif (!fragmentShader.getParameter(oogl.COMPILE_STATUS)) {\n\t\tthrow fragmentShader.getInfoLog();\n\t}\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvertexShader.source(vertexSource);\n\tvertexShader.compile();\n\tif (!vertexShader.getParameter(oogl.COMPILE_STATUS)) {\n\t\tthrow vertexShader.getInfoLog();\n\t}\n\tvar program = new oogl.Program();\n\tprogram.attachShader(fragmentShader);\n\tprogram.attachShader(vertexShader);\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_TexCoord');\n\tprogram.link();\n\tif (!program.getParameter(oogl.LINK_STATUS)) {\n\t\tthrow program.getInfoLog();\n\t}\n\tprogram.use();\n\nOr, simpler:\n\n\t// automatically compiles and links, throws if an error occurs\n\tvar program = new oogl.AutoProgram(fragmentSource, vertexSource, ['in_Vertex, in_TexCoord']);\n\tprogram.use();",
            "extends": "WebGLRenderingContext",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasOrId",
                    "description": "An HTMLCanvasElement DOM object, or a string\n\tcontaining its `id` attribute, representing the canvas whose WebGL context\n\thas to be wrapped.",
                    "type": "Mixed"
                },
                {
                    "name": "attributes",
                    "description": "WebGL attributes to pass to `canvas.getContext`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas', {\n\t\tstencil: true\n\t});"
            ]
        },
        "context.Framebuffer": {
            "name": "context.Framebuffer",
            "shortname": "context.Framebuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Framebuffer.js",
            "line": 7,
            "description": "Wraps a GL framebuffer object.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createFramebuffer`. The returned `WebGLFramebuffer` object is extended by\nOOGL-specific features and returned by the `Framebuffer` constructor.",
            "is_constructor": 1,
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar framebuffer = new oogl.Framebuffer();"
            ]
        },
        "OOGL.Loader": {
            "name": "OOGL.Loader",
            "shortname": "OOGL.Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Loader.js",
            "line": 3,
            "description": "TODO",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tasks",
                    "description": "TODO",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "example": [
                "\n\tTODO"
            ]
        },
        "OOGL.Matrix2": {
            "name": "OOGL.Matrix2",
            "shortname": "OOGL.Matrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix2.js",
            "line": 7,
            "description": "A mutable 2x2 matrix.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 4-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in column-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 4.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 0, 0, 1]); // creates the 2x2 identity matrix"
            ]
        },
        "OOGL.RotationMatrix2": {
            "name": "OOGL.RotationMatrix2",
            "shortname": "OOGL.RotationMatrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix2.js",
            "line": 392,
            "description": "Creates a 2D rotation matrix with the specified angle.",
            "extends": "OOGL.Matrix2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The (counterclockwise) rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar rotation = new OOGL.RotationMatrix2(30 * Math.PI / 180); // 30 degrees rotation"
            ]
        },
        "OOGL.ScalingMatrix2": {
            "name": "OOGL.ScalingMatrix2",
            "shortname": "OOGL.ScalingMatrix2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix2.js",
            "line": 408,
            "description": "Creates a 2D scaling matrix with the specified X and Y scaling factors.",
            "extends": "OOGL.Matrix2",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar scaling = new OOGL.ScalingMatrix2(0.5, 0.5); // halves the size of anything"
            ]
        },
        "OOGL.Matrix3": {
            "name": "OOGL.Matrix3",
            "shortname": "OOGL.Matrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 7,
            "description": "A mutable 3x3 matrix.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 9-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in column-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 9.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 0, 0, 0, 1, 0, 0, 0, 1]); // creates the 3x3 identity matrix"
            ]
        },
        "OOGL.RotationMatrix3": {
            "name": "OOGL.RotationMatrix3",
            "shortname": "OOGL.RotationMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 434,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe specified `(x, y, z)` axis by the specified `a` angle.\n\nThe specified `x`, `y` and `z` components must form a unit-length vector.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.RotationMatrix3(0, 1, 0, Math.PI / 2); // 90 degrees horizontal rotation"
            ]
        },
        "OOGL.XRotationMatrix3": {
            "name": "OOGL.XRotationMatrix3",
            "shortname": "OOGL.XRotationMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 466,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe X axis by the specified `angle`.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix3(Math.PI / 2); // 90 degrees rotation around the X axis"
            ]
        },
        "OOGL.YRotationMatrix3": {
            "name": "OOGL.YRotationMatrix3",
            "shortname": "OOGL.YRotationMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 487,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe Y axis by the specified `angle`.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix3(Math.PI / 2); // 90 degrees rotation around the Y axis"
            ]
        },
        "OOGL.ZRotationMatrix3": {
            "name": "OOGL.ZRotationMatrix3",
            "shortname": "OOGL.ZRotationMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 508,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe Z axis by the specified `angle`.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix3(Math.PI / 2); // 90 degrees rotation around the Z axis"
            ]
        },
        "OOGL.ScalingMatrix3": {
            "name": "OOGL.ScalingMatrix3",
            "shortname": "OOGL.ScalingMatrix3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix3.js",
            "line": 529,
            "description": "Creates a 3D scaling matrix using the specified `x`, `y` and `z` scaling\nfactors.",
            "extends": "OOGL.Matrix3",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.ScalingMatrix3(0.5, 0.5, 0.5); // halves the size of everything"
            ]
        },
        "OOGL.Matrix4": {
            "name": "OOGL.Matrix4",
            "shortname": "OOGL.Matrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 7,
            "description": "A mutable 4x4 matrix.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A 16-element array of the floating point values to be\n\tput into the matrix.\n\nMatrix elements are specified in column-major order.\n\nThe specified `data` array is duplicated into the matrix, changes to it will\nnot affect the content of the matrix.\n\nAn exception is thrown if the length of the `data` array is not 16.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\t// create the 4x4 identity matrix\n\tvar matrix = new OOGL.Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);"
            ]
        },
        "OOGL.TranslationMatrix4": {
            "name": "OOGL.TranslationMatrix4",
            "shortname": "OOGL.TranslationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 353,
            "description": "Creates a 3D translation matrix.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the translation vector.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the translation vector.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the translation vector.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\t// translate by 3 units on the X axis, 4 on the Y axis and 5 on the Z axis\n\tvar m = new OOGL.TranslationMatrix4(3, 4, 5);"
            ]
        },
        "OOGL.RotationMatrix4": {
            "name": "OOGL.RotationMatrix4",
            "shortname": "OOGL.RotationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 370,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe specified `(x, y, z)` axis by the specified `a` angle.\n\nThe specified `x`, `y` and `z` components must form a unit-length vector.\n\nThe created matrix is identical to a rotation matrix created by using\n`OOGL.RotationMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component of the rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.RotationMatrix4(0, 1, 0, Math.PI / 2); // 90 degrees horizontal rotation"
            ]
        },
        "OOGL.XRotationMatrix4": {
            "name": "OOGL.XRotationMatrix4",
            "shortname": "OOGL.XRotationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 412,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe X axis by the specified `angle`.\n\nThe created matrix is identical to a rotation matrix created by using\n`OOGL.XRotationMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix4(Math.PI / 2); // 90 degrees rotation around the X axis"
            ]
        },
        "OOGL.YRotationMatrix4": {
            "name": "OOGL.YRotationMatrix4",
            "shortname": "OOGL.YRotationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 437,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe Y axis by the specified `angle`.\n\nThe created matrix is identical to a rotation matrix created by using\n`OOGL.YRotationMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix4(Math.PI / 2); // 90 degrees rotation around the Y axis"
            ]
        },
        "OOGL.ZRotationMatrix4": {
            "name": "OOGL.ZRotationMatrix4",
            "shortname": "OOGL.ZRotationMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 462,
            "description": "Creates a 3D rotation matrix that rotates everything counterclockwise around\nthe Z axis by the specified `angle`.\n\nThe created matrix is identical to a rotation matrix created by using\n`OOGL.ZRotationMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The rotation angle, in radians.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.XRotationMatrix4(Math.PI / 2); // 90 degrees rotation around the Z axis"
            ]
        },
        "OOGL.ScalingMatrix4": {
            "name": "OOGL.ScalingMatrix4",
            "shortname": "OOGL.ScalingMatrix4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 487,
            "description": "Creates a 3D scaling matrix using the specified `x`, `y` and `z` scaling\nfactors.\n\nThe created matrix is identical to a scaling matrix created by using\n`OOGL.ScalingMatrix3` and converted using its `toHomogeneous` method.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y scaling factor.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z scaling factor.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar m = new OOGL.ScalingMatrix4(0.5, 0.5, 0.5); // halves the size of everything"
            ]
        },
        "OOGL.OrthogonalProjection": {
            "name": "OOGL.OrthogonalProjection",
            "shortname": "OOGL.OrthogonalProjection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 507,
            "description": "Creates an orthographic projection matrix using the specified screen ratio.\n\nThe created matrix has the following form, in row-major order:\n\n\t1\t0\t0\t0\n\t0\tr\t0\t0\n\t0\t0\t1\t0\n\t0\t0\t0\t1\n\nwhere `r` is the screen ratio.",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "screenRatio",
                    "description": "The screen ratio, e.g. the screen width\n\tdivided by the screen height. Defaults to 1:1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "example": [
                "\n\tprogram.uniformMat4(new OOGL.OrthogonalProjection(4 / 3));"
            ]
        },
        "OOGL.IsometricProjection": {
            "name": "OOGL.IsometricProjection",
            "shortname": "OOGL.IsometricProjection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 534,
            "description": "Creates an isometric projection matrix using the specified span parameter and\nscreen ratio.\n\nTODO",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "span",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "screenRatio",
                    "description": "The screen ratio, e.g. the screen width\n\tdivided by the screen height. Defaults to 1:1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "example": [
                "\n\tprogram.uniformMat4('Projection', new OOGL.IsometricProjection(50));"
            ]
        },
        "OOGL.PerspectiveProjection": {
            "name": "OOGL.PerspectiveProjection",
            "shortname": "OOGL.PerspectiveProjection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Matrix4.js",
            "line": 553,
            "description": "Creates a perspective projection matrix with the specified focal angle and\nscreen ratio.\n\nThe created matrix has the following form, in row-major order:\n\n\th\t0\t\t0\t0\n\t0\th * r\t0\t0\n\t0\t0\t\t0\t1\n\t0\t0\t\t1\th\n\nwhere `r` is the screen ratio and `h` is defined by:\n\n\th = Math.cos(focus / 2);",
            "extends": "OOGL.Matrix4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "screenRatio",
                    "description": "The screen ratio, e.g. the screen width\n\tdivided by the screen height. Defaults to 1:1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "[focus=Math.PI",
                    "description": "/ 2] The focal angle, in radians; defaults to\n\tPI / 2 radians (90 degrees).",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tprogram.uniformMat4('Projection', new OOGL.PerspectiveProjection(4 / 3, Math.PI / 3));"
            ]
        },
        "context.Program": {
            "name": "context.Program",
            "shortname": "context.Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Programs.js",
            "line": 7,
            "description": "Wraps a GL program.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createProgram`. The returned `WebGLProgram` object is extended by\nOOGL-specific features and returned by the `Program` constructor.\n\n`Program` objects also maintain an independent uniform location cache so that\nuniform operations are sped up as `gl.getUniformLocation` calls are needed\nonly once per variable name. The cache is automatically invalidated when the\nprogram is linked using the provided `link` or `linkOrThrow` methods.",
            "extends": "WebGLProgram",
            "is_constructor": 1,
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(vertexShader); // either a WebGLShader or OOGL.VertexShader object\n\tprogram.attachShader(fragmentShader); // either a WebGLShader or OOGL.VertexShader object\n\tprogram.linkOrThrow();"
            ]
        },
        "context.AutoProgram": {
            "name": "context.AutoProgram",
            "shortname": "context.AutoProgram",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Programs.js",
            "line": 934,
            "description": "A `Program` that automatically compiles and links using a pair of GLSL shader\nsources. The info log is thrown if the program fails to compile or link.\n\nBefore linking, the `AutoProgram` constructor also binds a specified set of\nattribute variables to their respective indices using `bindAttribLocation`.",
            "extends": "context.Program",
            "is_constructor": 1,
            "params": [
                {
                    "name": "vertexSource",
                    "description": "The GLSL source code for the vertex shader.",
                    "type": "String"
                },
                {
                    "name": "fragmentSource",
                    "description": "The GLSL source code for the fragment shader.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "An array of attribute variable names that are\n\tautomatically bound to their respective indices in the array before linking.",
                    "type": "String[]"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoords']);"
            ]
        },
        "context.AjaxProgram": {
            "name": "context.AjaxProgram",
            "shortname": "context.AjaxProgram",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Programs.js",
            "line": 989,
            "description": "A `Program` that loads the sources of a pair of shaders via AJAX and\nautomatically tries to compile and link; the info log is thrown if the\nprogram fails to compile or link.\n\nThe URLs to the GLSL shader sources are specified as a single path without\nfile name extension; the `.vert` and `.frag` extensions are automatically\nappended to it.\n\nBefore linking, the `AjaxProgram` constructor also binds a specified set of\nattribute variables to their respective indices using `bindAttribLocation`.\n\nIf the program is compiled and linked successfully, the specified `callback`\nfunction is invoked using this `AjaxProgram` object as `this`.",
            "extends": "context.Program",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The URL to the shader sources excluding the file name\n\textension, which is automatically appended.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "An array of attribute variable names that are\n\tautomatically bound to their respective indices in the array before linking.",
                    "type": "String[]"
                },
                {
                    "name": "callback",
                    "description": "A user-defined callback function that is called\n\tafter the program has been successfully compiled and linked.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar arrays = new oogl.AttributeArrays(vertices.length);\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tvar program = new oogl.AjaxProgram('box', ['in_Vertex', 'in_Color', 'in_TexCoords'], function () {\n\t\tprogram.use();\n\t\tarrays.drawTriangles();\n\t\toogl.flush();\n\t});"
            ]
        },
        "OOGL.RenderLoop": {
            "name": "OOGL.RenderLoop",
            "shortname": "OOGL.RenderLoop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\RenderLoop.js",
            "line": 7,
            "description": "Efficient render loop implementation that uses `requestAnimationFrame` where\navailable and transparently falls back on `setInterval`.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tick",
                    "description": "A user-defined callback function that is invoked at\n\teach iteration of the loop. It typically contains (OO)GL calls that render\n\tthe full scene.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\t// setup the pipeline here, create programs and arrays\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\toogl.clear(oogl.COLOR_BUFFER_BIT | oogl.DEPTH_BUFFER_BIT);\n\t\tarrays.drawTriangles();\n\t\toogl.flush();\n\t});\n\tloop.start();"
            ]
        },
        "context.Renderbuffer": {
            "name": "context.Renderbuffer",
            "shortname": "context.Renderbuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Renderbuffer.js",
            "line": 7,
            "description": "Wraps a GL renderbuffer.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createRenderbuffer`. The returned `WebGLRenderbuffer` object is extended by\nOOGL-specific features and returned by the `Renderbuffer` constructor.",
            "is_constructor": 1,
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar renderbuffer = new oogl.Renderbuffer();"
            ]
        },
        "context.Shader": {
            "name": "context.Shader",
            "shortname": "context.Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Shaders.js",
            "line": 7,
            "description": "Wraps a GL shader.",
            "extends": "WebGLShader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of shader. Either `oogl.VERTEX_SHADER` or\n\t`oogl.FRAGMENT_SHADER`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvertexShader.source(vertexSource);\n\tvertexShader.compileOrThrow();"
            ]
        },
        "context.VertexShader": {
            "name": "context.VertexShader",
            "shortname": "context.VertexShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Shaders.js",
            "line": 183,
            "description": "A `Shader` whose type is `gl.VERTEX_SHADER`.\n\nThe `VertexShader` constructor optionally takes a string argument containing\nthe GLSL source code for the shader and tries to compile it through the\nprovided `compileOrThrow` method.",
            "extends": "context.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "The optional GLSL source code for the shader.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.VertexShader(vertexSource);"
            ]
        },
        "context.FragmentShader": {
            "name": "context.FragmentShader",
            "shortname": "context.FragmentShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Shaders.js",
            "line": 206,
            "description": "A `Shader` whose type is `gl.FRAGMENT_SHADER`.\n\nThe `FragmentShader` constructor optionally takes a string argument\ncontaining the GLSL source code for the shader and tries to compile it\nthrough the provided `compileOrThrow` method.",
            "extends": "context.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "The optional GLSL source code for the shader.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar fragmentShader = new oogl.FragmentShader(fragmentSource);"
            ]
        },
        "context.AjaxVertexShader": {
            "name": "context.AjaxVertexShader",
            "shortname": "context.AjaxVertexShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Shaders.js",
            "line": 229,
            "description": "A vertex shader which tries to load its GLSL source code using AJAX.\n\nThe `AjaxVertexShader` constructor also tries to compile the shader using the\nprovided `compileOrThrow` method.\n\nAfter the source code has been loaded and compiled successfully the specified\n`callback` function is invoked using this `AjaxVertexShader` object as\n`this`.",
            "extends": "context.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "A URL referring to the GLSL source code.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tvar vertexShader = new oogl.AjaxVertexShader('vert/box.vert', function () {\n\t\tprogram.attachShader(vertexShader);\n\t});"
            ]
        },
        "context.AjaxFragmentShader": {
            "name": "context.AjaxFragmentShader",
            "shortname": "context.AjaxFragmentShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Shaders.js",
            "line": 260,
            "description": "A fragment shader which tries to load its GLSL source code using AJAX.\n\nThe `AjaxFragmentShader` constructor also tries to compile the shader using\nthe provided `compileOrThrow` method.\n\nAfter the source code has been loaded and compiled successfully the specified\ncallback function is invoked using this `AjaxFragmentShader` object as\n`this`.",
            "extends": "context.Shader",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "A URL referring to the GLSL source code.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tvar fragmentShader = new oogl.AjaxFragmentShader('frag/box.frag', function () {\n\t\tprogram.attachShader(fragmentShader);\n\t});"
            ]
        },
        "context.Texture": {
            "name": "context.Texture",
            "shortname": "context.Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 7,
            "description": "Wraps a GL texture with a specified target.\n\nInstancing an object of this class is equivalent to calling the GL function\n`createTexture`. The returned `WebGLTexture` object is extended by\nOOGL-specific features and returned by the `Texture` constructor.",
            "extends": "WebGLTexture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target against which this texture will be bound\n\twhen the provided `bind` method is used. Either `gl.TEXTURE_2D` or\n\t`gl.TEXTURE_CUBE_MAP`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar oogl = new OOGL.Context('canvas');\n\tvar texture = new oogl.Texture(oogl.TEXTURE_2D);"
            ]
        },
        "context.Texture2D": {
            "name": "context.Texture2D",
            "shortname": "context.Texture2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 336,
            "description": "An `oogl.Texture` whose target is `gl.TEXTURE_2D`.",
            "extends": "context.Texture",
            "is_constructor": 1,
            "example": [
                "\n\tvar texture = new oogl.Texture2D();\n\ttexture.bind();\n\ttexture.setMagFilter(oogl.LINEAR);\n\ttexture.setMinFilter(oogl.LINEAR);\n\ttexture.image2D(0, oogl.RGBA, oogl.UNSIGNED_BYTE, image);"
            ]
        },
        "context.AutoTexture": {
            "name": "context.AutoTexture",
            "shortname": "context.AutoTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 353,
            "description": "Creates a texture from a DOM image, canvas or video element.\n\nThe `AutoTexture` constructor automatically binds the texture to the\n`gl.TEXTURE_2D` target, sets minifying and magnifying filters and passes the\nimage to `gl.texImage2D`.",
            "extends": "context.Texture2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "A DOM image, canvas or video element to use as the\n\ttexture image.",
                    "type": "Mixed"
                },
                {
                    "name": "magFilter",
                    "description": "An optional value for the magnifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                },
                {
                    "name": "minFilter",
                    "description": "An optional value for the minifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                }
            ],
            "example": [
                "\n\tvar arrays = new oogl.AttributeArrays(vertices.length);\n\t// add arrays here\n\tvar texture = new oogl.AutoTexture(image);\n\tarrays.drawTriangles();\n\toogl.flush();"
            ]
        },
        "context.AsyncTexture": {
            "name": "context.AsyncTexture",
            "shortname": "context.AsyncTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 394,
            "description": "Creates a texture from an asynchronously loaded image.\n\nThe `AsyncTexture` constructor automatically binds the texture to the\n`gl.TEXTURE_2D` target, sets minifying and magnifying filters and passes the\nimage to `gl.texImage2D`.\n\nIf the texture image is loaded successfully, the specified `callback`\nfunction is invoked using this `AsyncTexture` object as `this`.",
            "extends": "context.Texture2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL of the texture image.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A user-defined callback function that is called\n\tafter the texture has been loaded and configured.",
                    "type": "Function"
                },
                {
                    "name": "magFilter",
                    "description": "An optional value for the magnifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                },
                {
                    "name": "minFilter",
                    "description": "An optional value for the minifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                }
            ],
            "example": [
                "\n\tvar arrays = new oogl.AttributeArrays(vertices.length);\n\t// add arrays here\n\tvar texture = new oogl.AsyncTexture('texture.png', function () {\n\t\tarrays.drawTriangles();\n\t\toogl.flush();\n\t});"
            ]
        },
        "context.CubeMap": {
            "name": "context.CubeMap",
            "shortname": "context.CubeMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 459,
            "description": "An `oogl.Texture` whose target is `gl.TEXTURE_CUBE_MAP`.",
            "extends": "context.Texture",
            "is_constructor": 1,
            "example": [
                "\n\tvar cubeMap = new oogl.CubeMap();"
            ]
        },
        "context.AsyncCubeMap": {
            "name": "context.AsyncCubeMap",
            "shortname": "context.AsyncCubeMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 472,
            "description": "TODO",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "TODO",
                    "type": "Function"
                },
                {
                    "name": "magFilter",
                    "description": "An optional value for the magnifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                },
                {
                    "name": "minFilter",
                    "description": "An optional value for the minifying\n\tfilter.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gl.LINEAR"
                }
            ],
            "example": [
                "\n\tTODO"
            ]
        },
        "context.Textures": {
            "name": "context.Textures",
            "shortname": "context.Textures",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "context",
            "namespace": "",
            "file": "src\\Textures.js",
            "line": 525,
            "description": "A utility class that aids in the management of multiple textures.\n\nOne `Textures` objects represents a set of textures that must be\nsimultaneously bound (to different texture units) for use by the same\nprogram. The `Textures` object automatically assigns textures to texture\nunits.\n\nContained textures are assigned unique names which are then used as uniform\nvariable names when specifying uniforms with the provided `uniform` method.\n\nA `Texture` object may belong to several `Textures` sets at the same\ntime, so that it can be used by several programs.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "textures",
                    "description": "An optional object that map names to\n\t`oogl.Texture` objects. Names are used when specifying uniform variables\n\tusing the provided `uniform` method.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "example": [
                "\n\tvar textures = new oogl.Textures({\n\t\t'Texture': texture,\n\t\t'BumpMap': bumpMap\n\t});"
            ]
        },
        "OOGL.Timing": {
            "name": "OOGL.Timing",
            "shortname": "OOGL.Timing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Timing.js",
            "line": 3,
            "description": "Static class providing timing-related functions.",
            "static": 1,
            "example": [
                "\n\tTODO"
            ]
        },
        "OOGL.Vector2": {
            "name": "OOGL.Vector2",
            "shortname": "OOGL.Vector2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Vector2.js",
            "line": 7,
            "description": "A mutable 2-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector2(2, 3);"
            ]
        },
        "OOGL.Vector3": {
            "name": "OOGL.Vector3",
            "shortname": "OOGL.Vector3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Vector3.js",
            "line": 7,
            "description": "A mutable 3-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector3(3, 4, 5);"
            ]
        },
        "OOGL.Vector4": {
            "name": "OOGL.Vector4",
            "shortname": "OOGL.Vector4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "OOGL",
            "namespace": "",
            "file": "src\\Vector4.js",
            "line": 7,
            "description": "A mutable 4-component vector. This is usually the homogeneous version of a\n3-component vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Z component.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The homogeneous W component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector4(3, 4, 5, 1);"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\Ajax.js",
            "line": 17,
            "description": "Lets the user define a callback function that gets called when an error\nrelated to an AJAX request occurs.",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "callback",
                    "description": "A user-defined callback function that gets\n\tcalled in case of an error in an AJAX request.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.onError(function () {\n\t\talert('AJAX error occurred.');\n\t});"
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 223,
            "description": "Performs a GET AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "TODO",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.get('shaders/frag/box.frag', function (source) {\n\t\tfragmentShader = new oogl.FragmentShader(source);\n\t\t// ...\n\t});"
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 242,
            "description": "Performs a GET AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "url",
                    "description": "url The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tOOGL.Ajax.getJSON('meshes/box.json', function (box) {\n\t\tvertices = new oogl.VertexArray(0, 3, box.vertices);\n\t\ttextureCoordinates = new oogl.VertexArray(1, 2, box.textureCoordinates);\n\t\t// ...\n\t});"
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 260,
            "description": "Performs a POST AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 272,
            "description": "Performs a POST AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "postJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 284,
            "description": "Performs a PUT AJAX request. The data returned from the server is passed\nto a user-defined callback function.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 296,
            "description": "Performs a PUT AJAX request. The data returned from the server is parsed\nas JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "putJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 308,
            "description": "Performs a DELETE AJAX request. The data returned from the server is\npassed to a user-defined callback function.",
            "itemtype": "method",
            "name": "_delete",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Ajax.js",
            "line": 320,
            "description": "Performs a DELETE AJAX request. The data returned from the server is\nparsed as JSON and passed to a user-defined callback function.",
            "itemtype": "method",
            "name": "deleteJSON",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "An optional one-argument user-defined\n\tcallback function that is invoked when the request completes\n\tsuccessfully.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OOGL.Ajax",
            "module": "OOGL"
        },
        {
            "file": "src\\Arrays.js",
            "line": 61,
            "description": "Enables the `index`-th vertex attribute array.\n\n`gl.enableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "enable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray1",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 74,
            "description": "Disables the `index`-th vertex attribute array.\n\n`gl.disableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "disable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray1",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 87,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray1(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "context.AttributeArray1",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 111,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "context.AttributeArray1",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 136,
            "description": "TODO",
            "itemtype": "method",
            "name": "enableBindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray1",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 214,
            "description": "Enables the `index`-th vertex attribute array.\n\n`gl.enableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "enable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray2",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 227,
            "description": "Disables the `index`-th vertex attribute array.\n\n`gl.disableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "disable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray2",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 240,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray2(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "context.AttributeArray2",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 264,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "context.AttributeArray2",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 289,
            "description": "TODO",
            "itemtype": "method",
            "name": "enableBindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray2",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 367,
            "description": "Enables the `index`-th vertex attribute array.\n\n`gl.enableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "enable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray3",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 380,
            "description": "Disables the `index`-th vertex attribute array.\n\n`gl.disableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "disable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray3",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 393,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray3(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "context.AttributeArray3",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 417,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "context.AttributeArray3",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 442,
            "description": "TODO",
            "itemtype": "method",
            "name": "enableBindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray3",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 520,
            "description": "Enables the `index`-th vertex attribute array.\n\n`gl.enableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "enable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray4",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 533,
            "description": "Disables the `index`-th vertex attribute array.\n\n`gl.disableVertexAttribArray` equivalent.",
            "itemtype": "method",
            "name": "disable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray4",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 546,
            "description": "Specifies a pointer to this buffer for the `index`-th vertex attribute\narray.\n\nYou may optionally specify `stride` and `offset` parameters.\n\n`gl.vertexAttribPointer` equivalent.",
            "itemtype": "method",
            "name": "pointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar array = new oogl.AttributeArray4(0, 'float', [1, 2, 3, 4, 5, 6, 7, 8]);\n\tarray.bind();\n\tarray.pointer();"
            ],
            "class": "context.AttributeArray4",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 572,
            "description": "Binds this buffer to its target and then specifies its pointer for the\n`index`-th vertex attribute array.\n\nYou may optionally specify `stride` and `offset` parameters.\n\nEquivalent to calling `bind` and `pointer` subsequently.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndPointer();"
            ],
            "class": "context.AttributeArray4",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 597,
            "description": "TODO",
            "itemtype": "method",
            "name": "enableBindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in the\n\tarray (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the `pointer`\nparameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArray4",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 642,
            "description": "Adds a single component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add1",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 659,
            "description": "Adds a single signed byte component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add1b",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1b([1, 2, 3, 4, -1, -2, -3, -4]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 675,
            "description": "Adds a single unsigned byte component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add1ub",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1ub([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 691,
            "description": "Adds a single signed short integer component vertex attribute array\nto the set.",
            "itemtype": "method",
            "name": "add1s",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1s([1, 2, 3, 4, -1, -2, -3, -4]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 707,
            "description": "Adds a single unsigned short integer component vertex attribute array\nto the set.",
            "itemtype": "method",
            "name": "add1us",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1us([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 723,
            "description": "Adds a single floating point component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add1f",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add1f([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 739,
            "description": "Adds a 2-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add2",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 756,
            "description": "Adds a two signed byte component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add2b",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2b([1, 2, 3, 4, -1, -2, -3, -4]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 771,
            "description": "Adds a two unsigned byte component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add2ub",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2ub([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 786,
            "description": "Adds a two signed short integer component vertex attribute array to\nthe set.",
            "itemtype": "method",
            "name": "add2s",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2s([1, 2, 3, 4, -1, -2, -3, -4]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 802,
            "description": "Adds a two unsigned short integer component vertex attribute array to\nthe set.",
            "itemtype": "method",
            "name": "add2us",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2us([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 818,
            "description": "Adds a two floating point component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add2f",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add2f([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 834,
            "description": "Adds a 3-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add3",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3('float', [1, 2, 3, 4, 5, 6, 7, 8, 9]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 851,
            "description": "Adds a three signed byte component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add3b",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3b([1, 2, 3, -1, -2, -3]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 866,
            "description": "Adds a three unsigned byte component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add3ub",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3ub([1, 2, 3, 4, 5, 6]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 882,
            "description": "Adds a three signed short integer component vertex attribute array to\nthe set.",
            "itemtype": "method",
            "name": "add3s",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3s([1, 2, 3, -1, -2, -3]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 898,
            "description": "Adds a three unsigned short integer component vertex attribute array\nto the set.",
            "itemtype": "method",
            "name": "add3us",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3us([1, 2, 3, 4, 5, 6]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 914,
            "description": "Adds a three floating point component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add3f",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add3f([1, 2, 3, 4, 5, 6]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 930,
            "description": "Adds a 4-component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add4",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the data in the array. Must be one\n\tof `byte`, `ubyte`, `short`, `ushort` and `float`.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Array"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4('float', [1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 947,
            "description": "Adds a four signed byte component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add4b",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4b([1, 2, 3, 4, -1, -2, -3, -4]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 962,
            "description": "Adds a four unsigned byte component vertex attribute array to the set.",
            "itemtype": "method",
            "name": "add4ub",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4ub([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 977,
            "description": "Adds a four signed short integer component vertex attribute array to\nthe set.",
            "itemtype": "method",
            "name": "add4s",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4s([1, 2, 3, 4, -5, -6, -7, -8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 993,
            "description": "Adds a four unsigned short integer component vertex attribute array\nto the set.",
            "itemtype": "method",
            "name": "add4us",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4us([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1009,
            "description": "Adds a four floating point component vertex attribute array to the\nset.",
            "itemtype": "method",
            "name": "add4f",
            "params": [
                {
                    "name": "data",
                    "description": "A standard JavaScript array containing the\n\tattribute data.",
                    "type": "Number[]"
                },
                {
                    "name": "normalize",
                    "description": "Indicates whether attribute data\n\tmust be normalized by the GL.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\tarrays.add4f([1, 2, 3, 4, 5, 6, 7, 8]);"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1025,
            "description": "TODO",
            "itemtype": "method",
            "name": "enable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1038,
            "description": "TODO",
            "itemtype": "method",
            "name": "disable",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1051,
            "description": "Binds each array in the set to its buffer target (which is always\n`gl.ARRAY_BUFFER`) and specifies its pointer for the attribute array\nassociated to its index. This is typically used to prepare all the\narrays used by a program with just one call.\n\nYou may optionally specify `stride` and `offset` parameters.",
            "itemtype": "method",
            "name": "bindAndPointer",
            "params": [
                {
                    "name": "stride",
                    "description": "The stride between consecutive elements in\n\tthe array (see the explanation for the equivalent argument in\n\t`gl.vertexAttribPointer`).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The index of the first element of the\n\tunderlying buffer to be used for the attribute array.\n\nThis value is multiplied by the data type size and used as the\n`pointer` parameter in the `gl.vertexAttribPointer` call.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.AutoProgram(vertexSource, fragmentSource, ['in_Vertex', 'in_Color', 'in_TexCoord']);\n\tvar arrays = new oogl.AttributeArrays();\n\tarrays.add3('float', vertices);\n\tarrays.add3('float', colors);\n\tarrays.add2('float', textureCoordinates);\n\tarrays.enable();\n\tarrays.bindAndPointer();\n\tprogram.use();\n\tarrays.drawTriangles();"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1087,
            "description": "TODO",
            "itemtype": "method",
            "name": "enableBindAndPointer",
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1101,
            "description": "Draws the arrays in `gl.TRIANGLES` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLES`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangles();"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1130,
            "description": "Draws the arrays in `gl.TRIANGLE_FAN` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLE_FAN`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangleFan",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangleFan();"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1159,
            "description": "Draws the arrays in `gl.TRIANGLE_STRIP` mode.\n\nEquivalent to calling `gl.drawArrays` with `gl.TRIANGLE_STRIP`.\n\nYou may optionally specify `offset` and `count` parameters.",
            "itemtype": "method",
            "name": "drawTriangleStrip",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first vertex attribute to\n\tdraw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of vertex attributes to draw. When\n\tnot specified defaults to the `count` parameter passed to the\n\t`AttributeArrays` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\tarrays.bindAndPointer();\n\tarrays.drawTriangleStrip();"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1188,
            "description": "Deletes all the arrays in the set.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tarrays._delete();"
            ],
            "class": "context.AttributeArrays",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1247,
            "description": "Draws the elements in `gl.TRIANGLES` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLES`.",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the length of the `indices` array passed to the\n\t`ElementArray` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "context.ElementArray",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1271,
            "description": "Draws the elements in `gl.TRIANGLE_FAN` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLE_FAN`.",
            "itemtype": "method",
            "name": "drawTriangleFan",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the length of the `indices` array passed to the\n\t`ElementArray` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "context.ElementArray",
            "module": "context"
        },
        {
            "file": "src\\Arrays.js",
            "line": 1295,
            "description": "Draws the elements in `gl.TRIANGLE_STRIP` mode.\n\nEquivalent to calling `gl.drawElements` with `gl.TRIANGLE_STRIP`.",
            "itemtype": "method",
            "name": "drawTriangleStrip",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to draw.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "count",
                    "description": "The number of elements to draw. When not\n\tspecified defaults to the length of the `indices` array passed to the\n\t`ElementArray` constructor.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                ""
            ],
            "class": "context.ElementArray",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 61,
            "description": "Indicates whether this is a valid GL buffer.\n\n`gl.isBuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL buffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (buffer.is()) {\n\t\t// ..."
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 77,
            "description": "Queries a buffer-related parameter.\n\n`gl.getBufferParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar size = buffer.getParameter(oogl.BUFFER_SIZE);"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 92,
            "description": "Queries the size of this buffer.\n\nEquivalent to calling `gl.getBufferParameter` with `gl.BUFFER_SIZE`.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "The size of this buffer.",
                "type": "Number"
            },
            "example": [
                "\n\tvar size = buffer.getSize();"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 106,
            "description": "Queries the usage settings for this buffer.\n\nEquivalent to calling `gl.getBufferParameter` with `gl.BUFFER_USAGE`.",
            "itemtype": "method",
            "name": "getUsage",
            "return": {
                "description": "The usage settings for this buffer; will be one of\n\t`gl.STATIC_DRAW`, `gl.STREAM_DRAW` or `gl.DYNAMIC_DRAW`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar usage = buffer.getUsage();"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 121,
            "description": "Binds this buffer to its target.\n\nEquivalent to calling `gl.bindBuffer` with the target specified to\nthe constructor.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\tbuffer.bind();"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 135,
            "description": "Allocates or specifies buffer data.\n\nEquivalent to calling `gl.bufferData` using the target and usage\nspecified to the constructor.\n\nThe specified argument is either the size to allocate or the data to\nstore; in the latter case it is specified as a standard JavaScript\narray and automatically converted by OOGL to a typed array, depending\non the `type` specified to the constructor.",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "sizeOrData",
                    "description": "Either a number representing the size to\n\tallocate or a JavaScript `Array` containing the data to store.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\tbuffer.data([1, 1, -1, 1, -1, -1, 1, -1]);"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 159,
            "description": "Binds this buffer to its target and then allocates or specifies\nbuffer data.\n\nEquivalent to calling `bind` and `data` subsequently.",
            "itemtype": "method",
            "name": "bindAndData",
            "params": [
                {
                    "name": "sizeOrData",
                    "description": "Either a number representing the size to\n\tallocate or a JavaScript `Array` containing the data to store. See\n\tthe `bind` method.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\tbuffer.bindAndData([1, 1, -1, 1, -1, -1, 1, -1]);"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 180,
            "description": "Specifies buffer data.\n\nEquivalent to calling `gl.bufferSubData` with the target specified to\nthe constructor.",
            "itemtype": "method",
            "name": "subData",
            "params": [
                {
                    "name": "offset",
                    "description": "The index of the first element to overwrite.",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "A JavaScript `Array` containing the data to\n\tstore; the array will be automatically converted to a typed array,\n\tdepending on the `type` specified to the constructor.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tbuffer.data([1, 1, -1, 0, 0, 0, 0, 0]);\n\tbuffer.subData(3, [1, -1, -1, 1, -1]); // buffer now contains [1, 1, -1, 1, -1, -1, 1, -1]"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Buffers.js",
            "line": 199,
            "description": "Deletes this buffer.\n\n`gl.deleteBuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tbuffer._delete();"
            ],
            "class": "context.Buffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 23,
            "description": "Indicates whether this is a valid GL framebuffer.\n\n`gl.isFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL framebuffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (framebuffer.is()) {\n\t\t// ..."
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 39,
            "description": "TODO\n\n`gl.getAttachmentParameter` equivalent.",
            "itemtype": "method",
            "name": "getAttachmentParameter",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar attachmentType = framebuffer.getAttachmentParameter(oogl.COLOR_ATTACHMENT0, oogl.FRAMEBUFFER_ATTACHMENT_TYPE);"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 55,
            "description": "TODO\n\n`gl.bindFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\tframebuffer.bind();"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 68,
            "description": "TODO\n\n`gl.checkFramebufferStatus` equivalent.",
            "itemtype": "method",
            "name": "checkStatus",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tvar status = framebuffer.checkStatus();"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 82,
            "description": "TODO\n\n`gl.framebufferRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "renderbuffer",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "renderbuffer",
                    "description": "TODO",
                    "type": "WebGLRenderbuffer"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 97,
            "description": "TODO\n\n`gl.framebufferTexture2D` equivalent.",
            "itemtype": "method",
            "name": "texture2D",
            "params": [
                {
                    "name": "attachment",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "textarget",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "texture",
                    "description": "TODO",
                    "type": "WebGLTexture"
                },
                {
                    "name": "level",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Framebuffer.js",
            "line": 114,
            "description": "TODO\n\n`gl.deleteFramebuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tframebuffer._delete();"
            ],
            "class": "context.Framebuffer",
            "module": "context"
        },
        {
            "file": "src\\Loader.js",
            "line": 18,
            "description": "TODO",
            "itemtype": "method",
            "name": "queue",
            "params": [
                {
                    "name": "tasks",
                    "description": "TODO",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Loader",
            "module": "context"
        },
        {
            "file": "src\\Loader.js",
            "line": 30,
            "description": "TODO",
            "itemtype": "method",
            "name": "queueSync",
            "params": [
                {
                    "name": "tasks",
                    "description": "TODO",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Loader",
            "module": "context"
        },
        {
            "file": "src\\Loader.js",
            "line": 49,
            "description": "TODO",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Loader",
            "module": "context"
        },
        {
            "file": "src\\Loader.js",
            "line": 61,
            "description": "TODO",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "TODO",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Loader",
            "module": "context"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 29,
            "description": "The element at cell (0, 0) of this matrix.",
            "itemtype": "property",
            "name": "0",
            "type": "Number",
            "example": [
                "\n\tvar a00 = matrix[0];"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 38,
            "description": "The element at cell (1, 0) of this matrix.",
            "itemtype": "property",
            "name": "1",
            "type": "Number",
            "example": [
                "\n\tvar a10 = matrix[1];"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 47,
            "description": "The element at cell (0, 1) of this matrix.",
            "itemtype": "property",
            "name": "2",
            "type": "Number",
            "example": [
                "\n\tvar a01 = matrix[2];"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 56,
            "description": "The element at cell (1, 1) of this matrix.",
            "itemtype": "property",
            "name": "3",
            "type": "Number",
            "example": [
                "\n\tvar a11 = matrix[3];"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 70,
            "description": "TODO",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "TODO",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 85,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `j * 2 + i`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[j * 2 + i] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar determinant = m.get(0, 0) * m.get(1, 1) - m.get(0, 1) * m.get(1, 0); // -5"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 105,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `j * 2 + i`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[j * 2 + i] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([3, 3, 0, 3]);\n\tmatrix.put(0, 1, 3); // now matrix is [3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 127,
            "description": "Transposes this matrix.",
            "itemtype": "method",
            "name": "transpose",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.transpose(); // matrix is now [1, 3, 2, 4]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 144,
            "description": "Computes the transposed matrix and returns it as a new `Matrix2` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getTransposed",
            "return": {
                "description": "The transposed matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.getTransposed(); // m2 is [1, 3, 2, 4], m1 is still [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 158,
            "description": "Adds the specified matrix to this one.\n\nEach element of the specified matrix is added up to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.add(new OOGL.Matrix2([4, 3, 2, 1])); // matrix is now [5, 5, 5, 5]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 178,
            "description": "Adds the specified matrix to this one and returns the sum as a new\n`Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "return": {
                "description": "The sum matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = new OOGL.Matrix2([4, 3, 2, 1]);\n\tvar m3 = m1.plus(m2); // [5, 5, 5, 5]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 198,
            "description": "Subtracts the specified matrix to this one.\n\nEach element of the specified matrix is subtracted to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([5, 5, 5, 5]);\n\tmatrix.subtract(new OOGL.Matrix2([4, 3, 2, 1])); // matrix is now [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 218,
            "description": "Subtracts the specified matrix to this one and returns the difference as\na new `Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "return": {
                "description": "The difference matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([5, 5, 5, 5]);\n\tvar m2 = new OOGL.Matrix2([4, 3, 2, 1]);\n\tvar m3 = m1.minus(m2); // [1, 2, 3, 4]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 238,
            "description": "Multiplies this matrix by the specified constant factor. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.multiply(2); // matrix is now [2, 4, 6, 8]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 256,
            "description": "Multiplies this matrix by the specified constant factor and returns the\nproduct as a new `Matrix2` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.by(2); // [2, 4, 6, 8]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 268,
            "description": "Left-multiplies this matrix by the specified `Vector2` object and returns\nthe product as a new `Vector2` object. Neither this matrix nor the\nspecified vector are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([2, 0, 0, 2]);\n\tvar v = new OOGL.Vector2(2, 2);\n\tvar w = m.by(v); // (4, 4)"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 282,
            "description": "Left-multiplies this matrix by the specified `Matrix2` object and returns\nthe product as a new `Matrix2` object. Neither this matrix nor the\nspecified one are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The matrix to multiply.",
                    "type": "OOGL.Matrix2"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([2, 0, 0, 2]);\n\tvar m2 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m3 = m1.by(m2); // (2, 4, 6, 8)"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 317,
            "description": "Computes the determinant of this matrix.",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "The computed determinant.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar d = m.determinant(); // -2"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 330,
            "description": "Inverts this matrix.",
            "itemtype": "method",
            "name": "invert",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix2([1, 2, 3, 4]);\n\tmatrix.invert(); // matrix is now [-0.5, -1, -1.5, -2]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 353,
            "description": "Computes the inverse matrix and returns it as a new `Matrix2` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getInverse",
            "return": {
                "description": "The inverse matrix.",
                "type": "OOGL.Matrix2"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix2([1, 2, 3, 4]);\n\tvar m2 = m1.getInverse(); // [-0.5, -1, -1.5, -2]"
            ],
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 374,
            "description": "The 2x2 null matrix.",
            "itemtype": "property",
            "name": "OOGL.Matrix2.NULL",
            "static": 1,
            "type": "OOGL.Matrix2",
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix2.js",
            "line": 383,
            "description": "The 2x2 identity matrix.",
            "itemtype": "property",
            "name": "OOGL.Matrix2.IDENTITY",
            "static": 1,
            "type": "OOGL.Matrix2",
            "class": "OOGL.Matrix2",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 37,
            "description": "TODO",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "TODO",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 53,
            "description": "Yields a new `Matrix4` object corresponding to a homogeneous 4x4 matrix\nequivalent to this matrix.\n\nThe upper left block of the new 4x4 matrix is set using the values from\nthis 3x3 matrix, while the lower right corner is set to 1 and the rest to\n0.",
            "itemtype": "method",
            "name": "toHomogeneous",
            "return": {
                "description": "The homogeneous matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tvar m4 = m3.toHomogeneous();"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 75,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `j * 3 + i`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[j * 3 + i] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tif (m.get(2, 1) == m[6]) { // true\n\t\t..."
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 96,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `j * 3 + i`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[j * 3 + i] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([3, 3, 0, 3, 3, 3, 3, 3, 3]);\n\tmatrix.put(0, 1, 3); // now matrix is [3, 3, 3, 3, 3, 3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 118,
            "description": "Transposes this matrix.",
            "itemtype": "method",
            "name": "transpose",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.transpose(); // matrix is now [1, 3, 2, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 135,
            "description": "Computes the transposed matrix and returns it as a new `Matrix3` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getTransposed",
            "return": {
                "description": "The transposed matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = m1.getTransposed(); // [1, 4, 7, 2, 5, 8, 3, 6, 9]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 149,
            "description": "Adds the specified matrix to this one.\n\nEach element of the specified matrix is added up to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.add(new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1])); // matrix is now [10, 10, 10, 10, 10, 10, 10, 10, 10]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 169,
            "description": "Adds the specified matrix to this one and returns the sum as a new\n`Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "return": {
                "description": "The sum matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n\tvar m3 = m1.plus(m2); // [10, 10, 10, 10, 10, 10, 10, 10, 10]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 189,
            "description": "Subtracts the specified matrix to this one.\n\nEach element of the specified matrix is subtracted to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([10, 10, 10, 10, 10, 10, 10, 10, 10]);\n\tmatrix.subtract(new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1])); // matrix is now [1, 2, 3, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 209,
            "description": "Subtracts the specified matrix to this one and returns the difference as\na new `Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "return": {
                "description": "The difference matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([10, 10, 10, 10, 10, 10, 10, 10, 10]);\n\tvar m2 = new OOGL.Matrix3([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n\tvar m3 = m1.minus(m2); // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 229,
            "description": "Multiplies this matrix by the specified constant factor. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.multiply(2); // matrix is now [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 241,
            "description": "Multiplies this matrix by the specified `Matrix3` object. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying matrix.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tmatrix.multiply(new OOGL.Matrix3([2, 0, 0, 0, 2, 0, 0, 0, 2])); // matrix is now [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 277,
            "description": "Multiplies this matrix by the specified constant factor and returns the\nproduct as a new `Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = m1.by(2); // [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 289,
            "description": "Left-multiplies this matrix by the specified `Vector3` object and returns\nthe product as a new `Vector3` object. Neither this matrix nor the\nspecified vector are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([2, 0, 0, 0, 3, 0, 0, 0, 4]);\n\tvar v = new OOGL.Vector3(3, 2, 1);\n\tvar w = m.by(v); // (6, 6, 4)"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 303,
            "description": "Left-multiplies this matrix by the specified `Matrix3` object and returns\nthe product as a new `Matrix3` object. Neither this matrix nor the\nspecified one are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The matrix to multiply.",
                    "type": "OOGL.Matrix3"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix3"
            },
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar m2 = new OOGL.Matrix3([2, 0, 0, 0, 2, 0, 0, 0, 2]);\n\tvar m3 = m1.by(m2); // [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 344,
            "description": "Computes the determinant of this matrix.",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "The computed determinant.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix3([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\tvar d = m.determinant(); // 0"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 359,
            "description": "Inverts this matrix.",
            "itemtype": "method",
            "name": "invert",
            "chainable": 1,
            "example": [
                "\n\tvar matrix = new OOGL.Matrix3([1, 0, 0, 0, 0, 1, 0, 1, 1]);\n\tmatrix.invert(); // matrix is now [1, 0, 0, 0, -1, 1, 0, 1, 0]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 389,
            "description": "Computes the inverse of this matrix and returns it as a new `Matrix3`\nobject.",
            "itemtype": "method",
            "name": "getInverse",
            "example": [
                "\n\tvar m1 = new OOGL.Matrix3([1, 0, 0, 0, 0, 1, 0, 1, 1]);\n\tvar m2 = m1.getInverse(); // [1, 0, 0, 0, -1, 1, 0, 1, 0]"
            ],
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 416,
            "description": "The null 3x3 matrix.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Matrix3",
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix3.js",
            "line": 425,
            "description": "The 3x3 identity matrix.",
            "itemtype": "property",
            "name": "IDENTITY",
            "static": 1,
            "type": "OOGL.Matrix3",
            "class": "OOGL.Matrix3",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 38,
            "description": "TODO",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "TODO",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 55,
            "description": "Returns the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nfetching the `j * 4 + i`-th element of the array:\n\n\tmatrix.get(i, j) == matrix[j * 4 + i] // true",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the specified row and column.",
                "type": "Number"
            },
            "example": [
                "\n\tvar m = new OOGL.Matrix4([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]);\n\tif (m.get(2, 3) == m[8]) { // true\n\t\t..."
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 76,
            "description": "Changes the element at the specified row and column in the matrix.\n\nRow and column indices are zero-based. This method is equivalent to\nsetting the `j * 4 + i`-th element of the array:\n\n\tmatrix.put(i, j, x);\n\tmatrix[j * 4 + i] = x; // same as previous",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The row index.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The column index.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to put at the specified row and column.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar matrix = new OOGL.Matrix4([0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]);\n\tmatrix.put(0, 0, 3); // now matrix is [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 98,
            "description": "Transposes this matrix.",
            "itemtype": "method",
            "name": "transpose",
            "chainable": 1,
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 119,
            "description": "Computes the transposed matrix and returns it as a new `Matrix4` object.\nThis matrix is not changed.",
            "itemtype": "method",
            "name": "getTransposed",
            "return": {
                "description": "The transposed matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 137,
            "description": "Adds the specified matrix to this one.\n\nEach element of the specified matrix is added up to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 156,
            "description": "Adds the specified matrix to this one and returns the sum as a new\n`Matrix3` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to add.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "return": {
                "description": "The sum matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 174,
            "description": "Subtracts the specified matrix to this one.\n\nEach element of the specified matrix is subtracted to the respective\nelement in this matrix. The specified `m` matrix is not changed.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 193,
            "description": "Subtracts the specified matrix to this one and returns the difference as\na new `Matrix4` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "m",
                    "description": "The matrix to subtract.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "return": {
                "description": "The difference matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 211,
            "description": "Multiplies this matrix by the specified constant factor. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 222,
            "description": "Multiplies this matrix by the specified `Matrix4` object. This method\nchanges the original matrix.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying matrix.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 264,
            "description": "Multiplies this matrix by the specified constant factor and returns the\nproduct as a new `Matrix4` object. This matrix is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "x",
                    "description": "The multiplying factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 275,
            "description": "Left-multiplies this matrix by the specified `Vector4` object and returns\nthe product as a new `Vector4` object. Neither this matrix nor the\nspecified vector are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply.",
                    "type": "OOGL.Vector4"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 287,
            "description": "Left-multiplies this matrix by the specified `Matrix4` object and returns\nthe product as a new `Matrix4` object. Neither this matrix nor the\nspecified one are changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "v",
                    "description": "The matrix to multiply.",
                    "type": "OOGL.Matrix4"
                }
            ],
            "return": {
                "description": "The product matrix.",
                "type": "OOGL.Matrix4"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 335,
            "description": "The null 4x4 matrix.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Matrix4",
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Matrix4.js",
            "line": 344,
            "description": "The 4x4 identity matrix.",
            "itemtype": "property",
            "name": "IDENTITY",
            "static": 1,
            "type": "OOGL.Matrix4",
            "class": "OOGL.Matrix4",
            "module": "OOGL"
        },
        {
            "file": "src\\Programs.js",
            "line": 32,
            "description": "Queries a program-related parameter.\n\n`gl.getProgramParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tif (!program.getParameter(oogl.LINK_STATUS)) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 49,
            "description": "Attaches the specified shader to this program.\n\n`gl.attachShader` equivalent.",
            "itemtype": "method",
            "name": "attachShader",
            "params": [
                {
                    "name": "shader",
                    "description": "The shader to attach. Can also be an OOGL\n\t`Shader`.",
                    "type": "WebGLShader"
                }
            ],
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tprogram.linkOrThrow();"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 67,
            "description": "Detaches the specified shader from this program.\n\n`gl.detachShader` equivalent.",
            "itemtype": "method",
            "name": "detachShader",
            "params": [
                {
                    "name": "shader",
                    "description": "The shader to detach. Can also be an OOGL\n\t`Shader`.",
                    "type": "WebGLShader"
                }
            ],
            "example": [
                "\n\tvar vertexShader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tvar program = new oogl.Program();\n\tprogram.attachShader(vertexShader);\n\tprogram.detachShader(vertexShader);"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 85,
            "description": "Returns an array of `WebGLShader` representing the shaders currently\nattached to this program.\n\n`gl.getAttachedShaders` equivalent.",
            "itemtype": "method",
            "name": "getAttachedShaders",
            "return": {
                "description": "An array of the currently attached shaders.",
                "type": "WebGLShader[]"
            },
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tvar shaders = program.getAttachedShaders(); // shaders now contains two elements"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 103,
            "description": "Returns the number of currently attached shaders.\n\nEquivalent to calling `gl.getProgramParameter` with\n`gl.ATTACHED_SHADERS`.",
            "itemtype": "method",
            "name": "getNumberOfAttachedShaders",
            "return": {
                "description": "The number of currently attached shaders.",
                "type": "Number"
            },
            "example": [
                "\n\tvar program = new oogl.Program();\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tvar count = program.getNumberOfAttachedShaders(); // 2"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 121,
            "description": "Binds the specified shader attribute variable `name` to the attribute\narray whose `index` is specified.\n\n`gl.bindAttribLocation` equivalent.",
            "itemtype": "method",
            "name": "bindAttribLocation",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the attribute array.",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "The name of the shader attribute variable.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_Color');\n\tprogram.bindAttribLocation(2, 'in_TexCoords');"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 139,
            "description": "Iterates over the specified `attributes` array of strings and binds each\nstring to its index. For example, these calls:\n\n\tprogram.bindAttribLocation(0, 'in_Vertex');\n\tprogram.bindAttribLocation(1, 'in_Color');\n\tprogram.bindAttribLocation(2, 'in_TexCoords');\n\nCan be made only once using `bindAttribLocations` like this:\n\n\tprogram.bindAttribLocations(['in_Vertex', 'in_Color', 'in_TexCoords']);",
            "itemtype": "method",
            "name": "bindAttribLocations",
            "params": [
                {
                    "name": "attributes",
                    "description": "The array, or index-to-string map,\n\tspecifying the names to bind and their respective indices.",
                    "type": "String[]"
                }
            ],
            "example": [
                "\n\tprogram.bindAttribLocations(['in_Vertex', 'in_Color', 'in_TexCoords']);"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 165,
            "description": "Links the program and invalidates the uniform location cache used to\nspeed up uniform operations.\n\n`gl.linkProgram` equivalent.",
            "itemtype": "method",
            "name": "link",
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 183,
            "description": "Returns the link status of this program.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.LINK_STATUS`.",
            "itemtype": "method",
            "name": "getLinkStatus",
            "return": {
                "description": "`true` if the program has been successuflly linked,\n\t`false` otherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 201,
            "description": "Returns the info log generated by the last link operation for this\nprogram.\n\n`gl.getProgramInfoLog` equivalent.",
            "itemtype": "method",
            "name": "getInfoLog",
            "return": {
                "description": "The info log.",
                "type": "String"
            },
            "example": [
                "\n\tprogram.link();\n\tif (!program.getLinkStatus()) {\n\t\tthrow program.getInfoLog();\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 219,
            "description": "Links the program, invalidates the uniform location cache used to speed\nup uniform operations and checks the link status; throws the info log if\nthe program did not link successfully.",
            "itemtype": "method",
            "name": "linkOrThrow",
            "example": [
                "\n\tprogram.attachShader(new oogl.VertexShader(vertexSource));\n\tprogram.attachShader(new oogl.FragmentShader(fragmentSource));\n\tprogram.linkOrThrow();"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 238,
            "description": "Uses the program in the GL pipeline.\n\n`gl.useProgram` equivalent.",
            "itemtype": "method",
            "name": "use",
            "example": [
                "\n\tprogram.use();"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 251,
            "description": "Validates the program.\n\n`gl.validateProgram` equivalent.",
            "itemtype": "method",
            "name": "validate",
            "example": [
                "\n\tprogram.validate();\n\tif (!program.getValidateStatus()) {\n\t\tthrow 'program validation error';\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 267,
            "description": "Returns the validation status produced by the last validation operation\nfor this program.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.VALIDATE_STATUS`.",
            "itemtype": "method",
            "name": "getValidateStatus",
            "return": {
                "description": "The validation status.",
                "type": "Boolean"
            },
            "example": [
                "\n\tprogram.validate();\n\tif (!program.getValidateStatus()) {\n\t\tthrow 'program validation error';\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 285,
            "description": "Validates the program and throws an exception if the validation fails.\n\nEquivalent to calling `gl.validateProgram` and `gl.getProgramParameter`\nwith `gl.VALIDATE_STATUS` subsequently.",
            "itemtype": "method",
            "name": "validateOrThrow",
            "example": [
                "\n\tprogram.validateOrThrow();"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 302,
            "description": "Returns information about the `index`-th active attribute array.\n\n`gl.getActiveAttrib` equivalent.",
            "itemtype": "method",
            "name": "getActiveAttrib",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the attribute array.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The requested information.",
                "type": "WebGLActiveInfo"
            },
            "example": [
                "\n\tconsole.dir(program.getActiveAttrib(0));"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 317,
            "description": "Returns the number of active attribute variables.\n\nEquivalent to calling `gl.getProgramParameter` with\n`gl.ACTIVE_ATTRIBUTES`.",
            "itemtype": "method",
            "name": "getNumberOfActiveAttributes",
            "return": {
                "description": "The number of actie attribute variables.",
                "type": "Number"
            },
            "example": [
                "\n\tconsole.log(program.getNumberOfActiveAttributes());"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 332,
            "description": "Returns information about the `index`-th active uniform variable.\n\n`gl.getActiveUniform` equivalent.",
            "itemtype": "method",
            "name": "getActiveUniform",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the uniform variable.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The requested information.",
                "type": "WebGLActiveInfo"
            },
            "example": [
                "\n\tconsole.dir(program.getActiveUniform(0));"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 347,
            "description": "Returns the number of active uniform variables.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.ACTIVE_UNIFORMS`.",
            "itemtype": "method",
            "name": "getNumberOfActiveUniforms",
            "return": {
                "description": "The number of actie uniform variables.",
                "type": "Number"
            },
            "example": [
                "\n\tconsole.log(program.getNumberOfActiveUniforms());"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 361,
            "description": "Returns the location of the named attribute.\n\n`gl.getAttribLocation` equivalent.",
            "itemtype": "method",
            "name": "getAttribLocation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The location of the named attribute.",
                "type": "Number"
            },
            "example": [
                "\n\tconsole.log(program.getAttribLocation('in_Vertex'));"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 376,
            "description": "Returns the current value of the specified uniform variable.\n\n`gl.getUniform` equivalent.\n\nThe uniform variable can be identified either by name or location. When a\nname is specified, the location is automatically looked up in a location\ncache maintained by the `Program` class. This cache is automatically\ninvalidated every time the program is linked using the provided `link`\nmethod.",
            "itemtype": "method",
            "name": "getUniform",
            "params": [
                {
                    "name": "locationOrName",
                    "description": "Either the location or the name of the\n\tuniform variable.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The value of the uniform variable.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar angle = program.getUniform('Angle');"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 407,
            "description": "Returns the location of the named uniform variable.\n\n`gl.getUniformLocation` equivalent.",
            "itemtype": "method",
            "name": "getUniformLocation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The location of the uniform variable.",
                "type": "Number"
            },
            "example": [
                "\n\tvar location = program.getUniformLocation('Angle');\n\tvar angle = program.getUniform(location);"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 421,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniform",
            "params": [
                {
                    "name": "map",
                    "description": "TODO",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "TODO",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "key",
                    "description": "TODO",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 439,
            "description": "Specifies the value for a `float` uniform variable.\n\n`gl.uniform1f` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform1f",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tprogram.uniform1f('Angle', 0);"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 459,
            "description": "Specifies the value for a `vec2` uniform variable.\n\n`gl.uniform2f` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform2f",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 480,
            "description": "Specifies the value for a `vec3` uniform variable.\n\n`gl.uniform3f` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform3f",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The new value for the third component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 503,
            "description": "Specifies the value for a `vec4` uniform variable.\n\n`gl.uniform4f` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform4f",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The new value for the third component.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The new value for the fourth component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 526,
            "description": "Specifies the value for a `float` uniform variable as an array.\n\n`gl.uniform1fv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform1fv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new value.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 546,
            "description": "Specifies the value for a `vec2` uniform variable as an array.\n\n`gl.uniform2fv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform2fv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 566,
            "description": "Specifies the value for a `vec3` uniform variable as an array.\n\n`gl.uniform3fv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform3fv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 586,
            "description": "Specifies the value for a `vec4` uniform variable as an array.\n\n`gl.uniform4fv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform4fv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 606,
            "description": "Specifies the value for an integer or boolean uniform variable.\n\n`gl.uniform1i` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform1i",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 626,
            "description": "Specifies the value for an `ivec2` or `bvec2` uniform variable.\n\n`gl.uniform2i` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform2i",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 647,
            "description": "Specifies the value for an `ivec3` or `bvec3` uniform variable.\n\n`gl.uniform3i` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform3i",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The new value for the third component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 669,
            "description": "Specifies the value for an `ivec4` or `bvec4` uniform variable.\n\n`gl.uniform4i` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform4i",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The new value for the first component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new value for the second component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The new value for the third component.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The new value for the fourth component.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 692,
            "description": "Specifies the value for an integer or boolean uniform variable as an\narray.\n\n`gl.uniform1iv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform1iv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new value.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 713,
            "description": "Specifies the value for an `ivec2` uniform variable as an array.\n\n`gl.uniform2iv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform2iv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 733,
            "description": "Specifies the value for an `ivec3` uniform variable as an array.\n\n`gl.uniform3iv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform3iv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 753,
            "description": "Specifies the value for an `ivec4` uniform variable as an array.\n\n`gl.uniform4iv` equivalent.\n\n`Program` objects have an internal location cache used by `uniform`\nmethods to set uniform variables without retrieving their location each\ntime. The cache is invalidated every time the program is relinked using\nthe provided `link` method.",
            "itemtype": "method",
            "name": "uniform4iv",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the uniform variable.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array containing the new values.",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 773,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformVec2",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "TODO",
                    "type": "OOGL.Vector2"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 786,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformVec3",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "TODO",
                    "type": "OOGL.Vector3"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 799,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformVec4",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "TODO",
                    "type": "OOGL.Vector4"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 812,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMatrix2fv",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "TODO",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 825,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMatrix3fv",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "TODO",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 838,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMatrix4fv",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "TODO",
                    "type": "Number[]"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 851,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMat2",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "TODO",
                    "type": "OOGL.Matrix2"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 867,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMat3",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "TODO",
                    "type": "OOGL.Matrix3"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 884,
            "description": "TODO",
            "itemtype": "method",
            "name": "uniformMat4",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "TODO",
                    "type": "OOGL.Matrix4"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 902,
            "description": "Deletes this program.\n\n`gl.deleteProgram` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tprogram._delete();"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 915,
            "description": "Returns the delete status of this program.\n\nEquivalent to calling `gl.getProgramParameter` with `gl.DELETE_STATUS`.",
            "itemtype": "method",
            "name": "getDeleteStatus",
            "return": {
                "description": "The delete status.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (program.getDeleteStatus()) {\n\t\t// the program has been deleted\n\t}"
            ],
            "class": "context.Program",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 956,
            "description": "Returns the vertex shader automatically generated by the constructor.",
            "itemtype": "method",
            "name": "getVertexShader",
            "return": {
                "description": "The vertex shader.",
                "type": "context.VertexShader"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AutoProgram",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 968,
            "description": "Returns the fragment shader automatically generated by the constructor.",
            "itemtype": "method",
            "name": "getFragmentShader",
            "return": {
                "description": "The fragment shader.",
                "type": "context.FragmentShader"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AutoProgram",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 1033,
            "description": "Returns the vertex shader automatically generated by the\nconstructor.",
            "itemtype": "method",
            "name": "getVertexShader",
            "return": {
                "description": "The vertex shader.",
                "type": "context.VertexShader"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AjaxProgram",
            "module": "context"
        },
        {
            "file": "src\\Programs.js",
            "line": 1046,
            "description": "Returns the fragment shader automatically generated by the\nconstructor.",
            "itemtype": "method",
            "name": "getFragmentShader",
            "return": {
                "description": "The fragment shader.",
                "type": "context.FragmentShader"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.AjaxProgram",
            "module": "context"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 106,
            "description": "Returns the type of this loop as a string; the return value can\nbe either `'request'` or `'interval'`.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type of this loop; either `'request'` or\n\t`'interval'`.",
                "type": "String"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setType('auto');\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tif (loop.getType() === 'interval') {\n\t\t// apparently rAF is not supported\n\t}"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 126,
            "description": "The frame rate of this loop.\n\nNote that this value is meaningless if `requestAnimationFrame` is\nbeing used by this loop.",
            "itemtype": "method",
            "name": "getRate",
            "return": {
                "description": "The frame rate of this loop.",
                "type": "Number"
            },
            "example": [
                "\n\tvar rate = loop.getRate();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 141,
            "description": "The period of this loop, in milliseconds. It is computed using\nthe formula:\n\n\tperiod = Math.floor(1000 / rate);\n\nThis value is also used in `setInterval`-based loops.",
            "itemtype": "method",
            "name": "getPeriod",
            "return": {
                "description": "The period of this loop, in milliseconds.",
                "type": "Number"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setRate(100);\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tvar period = loop.getPeriod(); // 10"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 162,
            "description": "Returns the _actual_ frame rate for this loop. This is\npotentially different from the value returned by `getRate`\nbecause the former is the measured frame rate while the latter is\nthe rate manually set using the static `setRate` method.\n\nThe actual frame rate is measured as the number of loop\niterations since the last time `getActualRate` was called divided\nby the timespan.\n\nThe measuring system automatically discards time spans during\nwhich the loop was suspended.",
            "itemtype": "method",
            "name": "getActualRate",
            "return": {
                "description": "The measured actual frame rate.",
                "type": "Number"
            },
            "example": [
                "\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tloop.start();\n\tsetInterval(function () {\n\t\trateDisplay.innerText = loop.getActualRate();\n\t}, 1000);"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 200,
            "description": "Starts the loop.",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n\tvar loop = new OOGL.RenderLoop(function () {\n\t\t// ...\n\t});\n\tloop.start();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 218,
            "description": "Suspends the execution of the loop. There is no effect if the\nloop is not running.",
            "itemtype": "method",
            "name": "suspend",
            "example": [
                "\n\tloop.suspend();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 234,
            "description": "Resume the execution of the loop. There is no effect if the loop\nhas not been previously suspended by the `suspend` method.",
            "itemtype": "method",
            "name": "resume",
            "example": [
                "\n\tloop.resume();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 250,
            "description": "Permanently stops the execution of the loop, whether it is\nsuspended or not. There is no effect if the loop has not been\nstarted yet.\n\nThe execution of this render loop cannot be restarted after it\nhas been stopped.",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n\tloop.stop();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 271,
            "description": "Indicates whether `requestAnimationFrame` is supported.",
            "itemtype": "method",
            "name": "isRequestAnimationFrameSupported",
            "static": 1,
            "return": {
                "description": "`true` if `requestAnimationFrame` is supported, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (OOGL.RenderLoop.isRequestAnimationFrameSupported()) {\n\t\tOOGL.RenderLoop.setType('request');\n\t} else {\n\t\tthrow 'requestAnimationFrame not supported';\n\t}"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 289,
            "description": "Returns the currently configured loop type.",
            "itemtype": "method",
            "name": "getType",
            "static": 1,
            "return": {
                "description": "The loop type; can be `request`, `interval` or `auto`.",
                "type": "String"
            },
            "example": [
                "\n\tvar currentType = RenderLoop.getType();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 302,
            "description": "Sets the loop type; can be `request`, `interval` or `auto`.\n\nWhen the loop type is `request` the `RenderLoop` constructor constructs\n`requestAnimationFrame`-based loops.\n\nWhen the loop type is `interval` the `RenderLoop` constructor constructs\n`setInterval`-based loops.\n\nWhen the loop type is `auto` the `RenderLoop` constructor constructs\n`requestAnimationFrame`-based loops if the `requestAnimationFrame` API is\nsupported, `setInterval`-based loops otherwise.",
            "itemtype": "method",
            "name": "setType",
            "static": 1,
            "params": [
                {
                    "name": "newType",
                    "description": "The loop type; can be `request`, `interval` or\n\t`auto`.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tRenderLoop.setType('request');"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 334,
            "description": "Returns the global frame rate setting. This frame rate is used to\nconfigure every constructed `RenderLoop` object.",
            "itemtype": "method",
            "name": "getRate",
            "static": 1,
            "return": {
                "description": "The frame rate associated to the `RenderLoop` class.",
                "type": "Number"
            },
            "example": [
                "\n\tvar currentRate = RenderLoop.getRate();"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 348,
            "description": "Returns the period relative to the frame rate associated to the\n`RenderLoop` class. This is computed as:\n\n\tMath.floor(1000 / rate)\n\nwhere `rate` is the value returned by the _static_ `getRate` method.",
            "itemtype": "method",
            "name": "getPeriod",
            "static": 1,
            "return": {
                "description": "The period relative to the frame rate associated to the\n\t`RenderLoop` class.",
                "type": "Number"
            },
            "example": [
                "\n\tOOGL.RenderLoop.setRate(100);\n\tvar period = OOGL.RenderLoop.getPeriod(); // 10"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\RenderLoop.js",
            "line": 368,
            "description": "Changes the global frame rate setting. This setting is used to configure\nevery constructed `RenderLoop`.",
            "itemtype": "method",
            "name": "setRate",
            "static": 1,
            "params": [
                {
                    "name": "newRate",
                    "description": "The new frame rate value.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tRenderLoop.setRate(100);"
            ],
            "class": "OOGL.RenderLoop",
            "module": "OOGL"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 23,
            "description": "Indicates whether this is a valid GL renderbuffer.\n\n`gl.isRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` is this is a valid GL renderbuffer, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (renderbuffer.is()) {\n\t\t// ..."
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 39,
            "description": "Queries a renderbuffer-related parameter.\n\n`gl.getRenderbufferParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Mixed"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 54,
            "description": "TODO",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 66,
            "description": "TODO",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 78,
            "description": "TODO",
            "itemtype": "method",
            "name": "getInternalFormat",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 90,
            "description": "TODO",
            "itemtype": "method",
            "name": "getRedSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 102,
            "description": "TODO",
            "itemtype": "method",
            "name": "getGreenSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 114,
            "description": "TODO",
            "itemtype": "method",
            "name": "getBlueSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 126,
            "description": "TODO",
            "itemtype": "method",
            "name": "getAlphaSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 138,
            "description": "TODO",
            "itemtype": "method",
            "name": "getDepthSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 150,
            "description": "TODO",
            "itemtype": "method",
            "name": "getStencilSize",
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 162,
            "description": "Binds this renderbuffer.\n\n`gl.bindRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\trenderbuffer.bind();"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 175,
            "description": "TODO",
            "itemtype": "method",
            "name": "storage",
            "params": [
                {
                    "name": "internalFormat",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tTODO"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Renderbuffer.js",
            "line": 189,
            "description": "Deletes this renderbuffer.\n\n`gl.deleteRenderbuffer` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\trenderbuffer._delete();"
            ],
            "class": "context.Renderbuffer",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 23,
            "description": "Queries a shader-related parameter.\n\n`gl.getShaderParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The parameter name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar shaderType = shader.getParameter(oogl.SHADER_TYPE);"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 38,
            "description": "Returns the type of this shader, which is either `gl.VERTEX_SHADER` or\n`gl.FRAGMENT_SHADER`.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.SHADER_TYPE`.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The type of this shader.",
                "type": "Number"
            },
            "example": [
                "\n\tvar shaderType = shader.getType();"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 53,
            "description": "Specifies the GLSL source code for this shader.\n\n`gl.shaderSource` equivalent.",
            "itemtype": "method",
            "name": "source",
            "params": [
                {
                    "name": "source",
                    "description": "The GLSL source code.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shader = new oogl.Shader(oogl.VERTEX_SHADER);\n\tshader.source(vertexSource);"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 68,
            "description": "Returns the GLSL source code for this shader.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.SHADER_SOURCE`.",
            "itemtype": "method",
            "name": "getSource",
            "return": {
                "description": "The GLSL source code.",
                "type": "String"
            },
            "example": [
                "\n\tvar vertexSource = vertexShader.getSource();"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 82,
            "description": "Compiles this shader.\n\n`gl.compileShader` equivalent.",
            "itemtype": "method",
            "name": "compile",
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 99,
            "description": "Returns the compile status produced by the last compile operation for\nthis shader.\n\nEquivalent to calling `gl.getShaderParameter` with `gl.COMPILE_STATUS`.",
            "itemtype": "method",
            "name": "getCompileStatus",
            "return": {
                "description": "`true` if the shader was compiled successfully, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 119,
            "description": "Returns the info log produced by the last compile operation for this\nshader.\n\n`gl.getShaderInfoLog` equivalent.",
            "itemtype": "method",
            "name": "getInfoLog",
            "return": {
                "description": "The info log.",
                "type": "String"
            },
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compile();\n\tif (!shader.getCompileStatus()) {\n\t\tthrow shader.getInfoLog();\n\t}"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 138,
            "description": "Compiles this shader, throws the info log if the shader does not compile\nsuccessfully.",
            "itemtype": "method",
            "name": "compileOrThrow",
            "example": [
                "\n\tshader.source(shaderSource);\n\tshader.compileOrThrow();"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 154,
            "description": "Deletes this shader.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\tshader._delete();"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Shaders.js",
            "line": 165,
            "description": "Returns the delete status for this shader.",
            "itemtype": "method",
            "name": "getDeleteStatus",
            "return": {
                "description": "`true` if the shader has been deleted, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (shader.getDeleteStatus()) {\n\t\tthrow 'The shader has been deleted.';\n\t}"
            ],
            "class": "context.Shader",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 27,
            "description": "Indicates whether this is a valid GL texture.\n\n`gl.isTexture` equivalent.",
            "itemtype": "method",
            "name": "is",
            "return": {
                "description": "`true` if this is a valid GL texture, `false`\n\totherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tif (texture.is()) {\n\t\t// ..."
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 43,
            "description": "Binds this texture to its target.\n\n`gl.bindTexture` equivalent.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\ttexture.bind();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 56,
            "description": "Queries a texture-related parameter.\n\n`gl.getTexParameter` equivalent.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter to query.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The queried value.",
                "type": "Mixed"
            },
            "example": [
                "\n\tvar wrapS = texture.getParameter(oogl.TEXTURE_WRAP_S);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 71,
            "description": "Queries the minifying filter setting for this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_MIN_FILTER`.",
            "itemtype": "method",
            "name": "getMinFilter",
            "return": {
                "description": "The minifying filter setting; one of `gl.NEAREST`,\n\t`gl.LINEAR`, `gl.NEAREST_MIPMAP_NEAREST`, `gl.LINEAR_MIPMAP_NEAREST`,\n\t`gl.NEAREST_MIPMAP_LINEAR` or `gl.LINEAR_MIPMAP_LINEAR`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar minFilter = texture.getMinFilter();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 87,
            "description": "Queries the magnifying filter setting for this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_MAG_FILTER`.",
            "itemtype": "method",
            "name": "getMagFilter",
            "return": {
                "description": "The magnifying filter setting; one of `gl.NEAREST`,\n\t`gl.LINEAR`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar magFilter = texture.getMagFilter();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 102,
            "description": "Queries the \"wrap S\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_WRAP_S`.",
            "itemtype": "method",
            "name": "getWrapS",
            "return": {
                "description": "The \"wrap S\" parameter; one of `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar wrapS = texture.getWrapS();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 118,
            "description": "Queries the \"wrap T\" parameter of this texture.\n\nEquivalent to calling `gl.getTexParameter` with `gl.TEXTURE_WRAP_T`.",
            "itemtype": "method",
            "name": "getWrapT",
            "return": {
                "description": "The \"wrap T\" parameter; one of `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                "type": "Number"
            },
            "example": [
                "\n\tvar wrapT = texture.getWrapT();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 133,
            "description": "Sets the specified floating point parameter for this texture.\n\n`gl.texParameterf` equivalent.",
            "itemtype": "method",
            "name": "parameterf",
            "params": [
                {
                    "name": "name",
                    "description": "The parameter's name.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The new value.",
                    "type": "Number"
                }
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 146,
            "description": "Sets the specified integer parameter for this texture.\n\n`gl.texParameteri` equivalent.",
            "itemtype": "method",
            "name": "parameteri",
            "params": [
                {
                    "name": "name",
                    "description": "The parameter's name.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The new value.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.parameteri(oogl.TEXTURE_MAG_FILTER, oogl.LINEAR);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 161,
            "description": "Sets the minifying filter for this texture.\n\nEquivalent to calling `gl.texParameteri` with `gl.TEXTURE_MIN_FILTER`.",
            "itemtype": "method",
            "name": "setMinFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "The minifying filter; can be `gl.NEAREST`,\n\t`gl.LINEAR`, `gl.NEAREST_MIPMAP_NEAREST`, `gl.LINEAR_MIPMAP_NEAREST`,\n\t`gl.NEAREST_MIPMAP_LINEAR` or `gl.LINEAR_MIPMAP_LINEAR`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.setMinFilter(oogl.LINEAR);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 177,
            "description": "Sets the magnifying filter for this texture.\n\nEquivalent to calling `gl.texParameteri` with `gl.TEXTURE_MAG_FILTER`.",
            "itemtype": "method",
            "name": "setMagFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "The magnifying filter; can be `gl.NEAREST` or\n\t`gl.LINEAR`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.setMagFilter(oogl.LINEAR);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 192,
            "description": "Sets the S wrapping setting for this texture.\n\nEquivalent to calling `gl.texParameteri` with `gl.TEXTURE_WRAP_S`.",
            "itemtype": "method",
            "name": "setWrapS",
            "params": [
                {
                    "name": "wrap",
                    "description": "The S wrapping setting; can be `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.setWrapS(oogl.REPEAT);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 207,
            "description": "Sets the T wrapping setting for this texture.\n\nEquivalent to calling `gl.texParameteri` with `gl.TEXTURE_WRAP_T`.",
            "itemtype": "method",
            "name": "setWrapT",
            "params": [
                {
                    "name": "wrap",
                    "description": "The T wrapping setting; can be `gl.CLAMP_TO_EDGE`,\n\t`gl.MIRRORED_REPEAT` or `gl.REPEAT`.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.setWrapT(oogl.REPEAT);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 222,
            "description": "Generates mipmaps for this texture.\n\n`gl.generateMipmap` equivalent.",
            "itemtype": "method",
            "name": "generateMipmap",
            "example": [
                "\n\ttexture.generateMipmap();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 235,
            "description": "Specifies an image, canvas or video for this texture.\n\n`gl.texImage2D` equivalent.",
            "itemtype": "method",
            "name": "image2D",
            "params": [
                {
                    "name": "level",
                    "description": "The mipmap reduction level.",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "The texel format; can be `gl.ALPHA`, `gl.RGB`,\n\t`gl.RGBA`, `gl.LUMINANCE` or `gl.LUMINANCE_ALPHA`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The binary data type; can be `gl.UNSIGNED_BYTE`,\n\t`gl.UNSIGNED_SHORT_5_6_5`, `gl.UNSIGNED_SHORT_4_4_4_4` or\n\t`gl.UNSIGNED_SHORT_5_5_5_1`.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "A DOM image, canvas or video element to use as\n\ttexture image.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\ttexture.image2D(0, oogl.RGBA, oogl.UNSIGNED_BYTE, image);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 256,
            "description": "Specifies an image, canvas or video for a region of this texture.",
            "itemtype": "method",
            "name": "subImage2D",
            "params": [
                {
                    "name": "level",
                    "description": "The mipmap reduction level.",
                    "type": "Number"
                },
                {
                    "name": "xoffset",
                    "description": "The X offset within this texture.",
                    "type": "Number"
                },
                {
                    "name": "xoffset",
                    "description": "The Y offset within this texture.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the region within this texture.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The height of the region within this texture.",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "The texel format; can be `gl.ALPHA`, `gl.RGB`,\n\t`gl.RGBA`, `gl.LUMINANCE` or `gl.LUMINANCE_ALPHA`.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The binary data type; can be `gl.UNSIGNED_BYTE`,\n\t`gl.UNSIGNED_SHORT_5_6_5`, `gl.UNSIGNED_SHORT_4_4_4_4` or\n\t`gl.UNSIGNED_SHORT_5_5_5_1`.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "A DOM image, canvas or video element to use as\n\ttexture image.",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n\ttexture.image2D(0, 200, 150, 400, 300, oogl.RGBA, oogl.UNSIGNED_BYTE, image);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 279,
            "description": "Copies framebuffer pixels to this texture.\n\n`gl.copyTexImage2D` equivalent.",
            "itemtype": "method",
            "name": "copyImage2D",
            "params": [
                {
                    "name": "level",
                    "description": "The mipmap reduction level.",
                    "type": "Number"
                },
                {
                    "name": "internalFormat",
                    "description": "The texel format; can be `gl.ALPHA`,\n\t`gl.RGB`, `gl.RGBA`, `gl.LUMINANCE` or `gl.LUMINANCE_ALPHA`.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "The X window coordinate of the region to be copied.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y window coordinate of the region to be copied.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the region to be copied.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the region to be copied.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\t// copies an 800x600 pixel window\n\ttexture.copyImage2D(0, oogl.RGBA, 0, 0, 800, 600);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 300,
            "description": "Copies framebuffer pixels to a region of this texture.\n\n`gl.copyTexSubImage2D` equivalent.",
            "itemtype": "method",
            "name": "copySubImage2D",
            "params": [
                {
                    "name": "level",
                    "description": "The mipmap reduction level.",
                    "type": "Number"
                },
                {
                    "name": "xoffset",
                    "description": "The X offset within this texture.",
                    "type": "Number"
                },
                {
                    "name": "xoffset",
                    "description": "The Y offset within this texture.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "The X offset within the framebuffer.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y offset within the framebuffer.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the region to copy.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The height of the region to copy.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\ttexture.copySubImage2D(0, 0, 0, 200, 150, 400, 300);"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 320,
            "description": "Deletes this texture.\n\n`gl.deleteTexture` equivalent.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\ttexture._delete();"
            ],
            "class": "context.Texture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 438,
            "description": "The DOM `Image` object used for this texture.",
            "itemtype": "property",
            "name": "image",
            "type": "Image",
            "example": [
                "\n\tnew oogl.AsyncTexture('texture.png', function () {\n\t\t// insert the loaded image into a DOM element\n\t\tquerySelector('span#texture-image').appendChild(this.image);\n\t});"
            ],
            "class": "context.AsyncTexture",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 563,
            "description": "Adds a `Texture` to this set associating it a unique uniform variable\nname.\n\nIf the specified name is already in use by another texture in this\nset, the current texture is replaced by the specified one.\n\nThe texture is automatically assigned a texture unit, but the set\nmust be re-bound (using the `bind` method) before its textures can be\nused in programs.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the associated uniform variable.",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "The OOGL texture to add.",
                    "type": "context.Texture"
                }
            ],
            "example": [
                "\n\tvar textures = new oogl.Textures();\n\ttextures.add('Texture', texture);\n\ttextures.add('BumpMap', bumpMap);"
            ],
            "class": "context.Textures",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 601,
            "description": "Binds all the textures in this sets to their target in their\nrespective texture unit.\n\nEquivalent to calling `gl.activeTexture` and `gl.bindTexture` for\neach texture.",
            "itemtype": "method",
            "name": "bind",
            "example": [
                "\n\ttextures.bind();"
            ],
            "class": "context.Textures",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 619,
            "description": "Specifies uniform variable names for the specified program using the\nautomatically assigned texture units.",
            "itemtype": "method",
            "name": "uniform",
            "params": [
                {
                    "name": "program",
                    "description": "A `context.Program`.",
                    "type": "context.Program"
                }
            ],
            "example": [
                "\n\tvar textures = new oogl.Textures({\n\t\t'Texture': texture,\n\t\t'BumpMap': bumpMap\n\t});\n\ttextures.bind();\n\ttextures.uniform(program);"
            ],
            "class": "context.Textures",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 639,
            "description": "Binds all the textures in this sets to their target in their\nrespective texture unit and then specifies uniform variable names for\nthe specified program using the automatically assigned texture units.\n\nEquivalent to calling `bind` and `uniform` subsequently.",
            "itemtype": "method",
            "name": "bindAndUniform",
            "params": [
                {
                    "name": "program",
                    "description": "A `context.Program`.",
                    "type": "context.Program"
                }
            ],
            "example": [
                "\n\tvar textures = new oogl.Textures({\n\t\t'Texture': texture,\n\t\t'BumpMap': bumpMap\n\t});\n\ttextures.bindAnduniform(program);"
            ],
            "class": "context.Textures",
            "module": "context"
        },
        {
            "file": "src\\Textures.js",
            "line": 663,
            "description": "Deletes all the textures that have been added to this set and resets\nit to an empty set.\n\n`Textures` objects may be used again after deletion.",
            "itemtype": "method",
            "name": "_delete",
            "example": [
                "\n\ttextures._delete();"
            ],
            "class": "context.Textures",
            "module": "context"
        },
        {
            "file": "src\\Timing.js",
            "line": 13,
            "description": "Returns the current timestamp in milliseconds since the Epoch.\n\nThis method relies on `window.performance.now` where available and\ntransparently falls back to `Date.now`.",
            "itemtype": "method",
            "name": "now",
            "static": 1,
            "return": {
                "description": "The current timestamp in milliseconds.",
                "type": "Number"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "OOGL.Timing",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 18,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 26,
            "description": "The Y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 36,
            "description": "Clones this vector and returns the new one.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The new vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar position = OOGL.Vector2.NULL.clone();"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 48,
            "description": "Returns this vector as an array of two elements.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An array containing the X and Y components of this\n\tvector.",
                "type": "Number[]"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector2(1, 2);\n\tprogram.uniform2fv('Position', v.toArray());"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 62,
            "description": "Computes the modulus of the vector. This is computed as\n`Math.sqrt(x * x + y * y)`.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The computed value.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tvar l = v.length(); // 5"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 76,
            "description": "Normalizes this vector so that its length becomes 1.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.normalize(); // v is now (0.6, 0.8)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 92,
            "description": "Computes the normalized vector and returns it as a new `Vector2` object.\nThis vector is not changed.",
            "itemtype": "method",
            "name": "getNormalized",
            "return": {
                "description": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = v1.getNormalized(); // (0.6, 0.8)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 107,
            "description": "Adds the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.add(new OOGL.Vector2(1, 2)); // v is now (4, 6)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 123,
            "description": "Adds the specified 2-component vector to this one and returns the sum as\na new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The sum vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = new OOGL.Vector2(1, 2);\n\tvar v3 = v1.plus(v2); // (4, 6)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 139,
            "description": "Subtracts the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.subtract(new OOGL.Vector2(1, 2)); // v is now (2, 2)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 155,
            "description": "Subtracts the specified 2-component vector to this one and returns the\ndifference as a new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The difference vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = new OOGL.Vector2(1, 2);\n\tvar v3 = v1.minus(v2); // (2, 2)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 171,
            "description": "Multiplies this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(3, 4);\n\tv.multiply(2); // v is now (6, 8)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 187,
            "description": "Divides this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector2(6, 8);\n\tv.multiply(2); // v is now (3, 4)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 203,
            "description": "Multiplies this vector by the specified constant factor and returns the\nproduct as a new `Vector2` object. This vector is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(3, 4);\n\tvar v2 = v1.by(2); // (6, 8)"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 218,
            "description": "Computes the dot product between this vector and the specified one.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v",
                    "description": "The other vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The computed dot product.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector2(1, 2);\n\tvar v2 = new OOGL.Vector2(3, 4);\n\tvar dot = v1.dot(v2); // 11"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 233,
            "description": "Reflects this vector against a line whose normal vector is specified. The\nreflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "reflect",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvelocity.reflect(new OOGL.Vector2(0, 1));"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 257,
            "description": "Computes the reflection of this vector against a line whose normal vector\nis specified. The reflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThe computed vector is returned as a new `Vector2` object, this vector is\nnot changed.",
            "itemtype": "method",
            "name": "getReflected",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector2"
                }
            ],
            "return": {
                "description": "The computed reflected vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvar newVelocity = velocity.getReflected(new OOGL.Vector2(0, 1));"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 280,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "refract",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector2"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector2(0.3, -1);\n\tvar n = new OOGL.Vector2(0, 1);\n\tv.refract(n, 1.3);"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 308,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices; the computed vector is returned as a new\n`OOGL.Vector2` object, this object is not changed.",
            "itemtype": "method",
            "name": "getRefracted",
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector2"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The refracted vector.",
                "type": "OOGL.Vector2"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector2(0.3, -1);\n\tvar n = new OOGL.Vector2(0, 1);\n\tvar w = v.getRefracted(n, 1.3);"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 336,
            "description": "The null vector `(0, 0)`.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Vector2",
            "example": [
                "\n\tvar position = OOGL.Vector2.NULL.clone();"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 347,
            "description": "The `(1, 0)` vector.",
            "itemtype": "property",
            "name": "I",
            "static": 1,
            "type": "OOGL.Vector2",
            "example": [
                "\n\tvar position = new OOGL.Vector2(0, 0);\n\tvar heading = new OOGL.RotationMatrix2(yaw);\n\n\tposition.add(heading.by(OOGL.Vector2.I));"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector2.js",
            "line": 361,
            "description": "The `(0, 1)` vector.",
            "itemtype": "property",
            "name": "J",
            "static": 1,
            "type": "OOGL.Vector2",
            "example": [
                "\n\tvar position = new OOGL.Vector2(0, 0);\n\tvar heading = new OOGL.RotationMatrix2(yaw);\n\n\tposition.add(heading.by(OOGL.Vector2.J));"
            ],
            "class": "OOGL.Vector2",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 19,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 27,
            "description": "The Y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 35,
            "description": "The Z component.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 45,
            "description": "Clones this vector and returns the new one.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The new vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar position = OOGL.Vector3.NULL.clone();"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 57,
            "description": "Returns this vector as an array of three elements.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An array containing the X, Y and Z components of this\n\tvector.",
                "type": "Number[]"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 3);\n\tprogram.uniform3fv('Position', v.toArray());"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 71,
            "description": "Creates a homogeneous version of this vector by adding a unitary `w`\ncoordinate and returns it as a new `Vector4` object. This vector is not\nchanged.",
            "itemtype": "method",
            "name": "toHomogeneous",
            "return": {
                "description": "A homogeneous vector corresponding to this vector.",
                "type": "OOGL.Vector4"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 3);\n\tvar w = v.toHomogeneous(); // (1, 2, 3, 1)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 86,
            "description": "Computes the modulus of the vector. This is computed as\n`Math.sqrt(x * x + y * y + z * z)`.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The computed value.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 2);\n\tvar l = v.length(); // 3"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 100,
            "description": "Normalizes this vector so that its length becomes 1.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 2);\n\tv.normalize(); // v is now (0.33, 0.66, 0.66)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 117,
            "description": "Computes the normalized vector and returns it as a new `Vector3` object.\nThis vector is not changed.",
            "itemtype": "method",
            "name": "getNormalized",
            "return": {
                "description": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(1, 2, 2);\n\tvar v2 = v1.getNormalized(); // (0.33, 0.66, 0.66)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 132,
            "description": "Adds the specified 2-component vector to this one.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(4, 5, 6);\n\tv.add(new OOGL.Vector3(1, 2, 3)); // v is now (5, 7, 9)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 149,
            "description": "Adds the specified 2-component vector to this one and returns the sum as\na new `Vector3` object. This vector is not changed.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The sum vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(4, 5, 6);\n\tvar v2 = new OOGL.Vector3(1, 2, 3);\n\tvar v3 = v1.plus(v2); // (5, 7, 9)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 165,
            "description": "Subtracts the specified 3-component vector to this one.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(4, 5, 6);\n\tv.subtract(new OOGL.Vector2(1, 2, 3)); // v is now (3, 3, 3)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 182,
            "description": "Subtracts the specified 3-component vector to this one and returns the\ndifference as a new `Vector3` object. This vector is not changed.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The difference vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(4, 5, 6);\n\tvar v2 = new OOGL.Vector3(1, 2, 3);\n\tvar v3 = v1.minus(v2); // (3, 3, 3)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 198,
            "description": "Multiplies this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(3, 4, 5);\n\tv.multiply(2); // v is now (6, 8, 10)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 215,
            "description": "Divides this vector by the specified constant factor.",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\tvar v = new OOGL.Vector3(6, 8, 10);\n\tv.multiply(2); // v is now (3, 4, 5)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 232,
            "description": "Multiplies this vector by the specified constant factor and returns the\nproduct as a new `Vector3` object. This vector is not changed.",
            "itemtype": "method",
            "name": "by",
            "params": [
                {
                    "name": "f",
                    "description": "The constant factor.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The product vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(3, 4, 5);\n\tvar v2 = v1.by(2); // (6, 8, 10)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 247,
            "description": "Computes the dot product between this vector and the specified one.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v",
                    "description": "The other vector.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The computed dot product.",
                "type": "Number"
            },
            "example": [
                "\n\tvar v1 = new OOGL.Vector3(1, 2, 3);\n\tvar v2 = new OOGL.Vector3(4, 5, 6);\n\tvar dot = v1.dot(v2); // 32"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 262,
            "description": "Cross multiplies this vector by the specified one.",
            "itemtype": "method",
            "name": "cross",
            "chainable": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector to cross-multiply.",
                    "type": "OOGL.Vector3"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector3(1, 2, 3);\n\tv.cross(new OOGL.Vector3(4, 5, 6)); // v is now (-3, 6, -3)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 282,
            "description": "Computes the cross product between this vector and the specified one and\nreturns it as a new `Vector3` object. This vector is not changed.",
            "itemtype": "method",
            "name": "getCrossProduct",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to cros-multiply.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The cross product.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar u = new OOGL.Vector3(1, 2, 3);\n\tvar v = new OOGL.Vector3(4, 5, 6);\n\tvar w = u.getCrossProduct(w); // (-3, 6, -3)"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 298,
            "description": "Reflects this vector against a line whose normal vector is specified. The\nreflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "reflect",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector3"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvelocity.reflect(new OOGL.Vector3(0, 1, 0));"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 323,
            "description": "Computes the reflection of this vector against a line whose normal vector\nis specified. The reflection of a vector `v` is computed as:\n\n\tv - 2 * (v.n) * n\n\nwhere `v.n` is the dot product between the vector and the normal.\n\nThe computed vector is returned as a new `Vector3` object, this vector is\nnot changed.",
            "itemtype": "method",
            "name": "getReflected",
            "params": [
                {
                    "name": "n",
                    "description": "The normal vector.",
                    "type": "OOGL.Vector3"
                }
            ],
            "return": {
                "description": "The computed reflected vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\t// reflects a velocity vector against a floor\n\tvar newVelocity = velocity.getReflected(new OOGL.Vector3(0, 1, 0));"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 346,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices.\n\nThis method modifies the original object.",
            "itemtype": "method",
            "name": "refract",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector3"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\tvar v = new OOGL.Vector3(0.3, -1, 0);\n\tvar n = new OOGL.Vector3(0, 1, 0);\n\tv.refract(n, 1.3);"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 376,
            "description": "Refracts this vector given a surface normal `n` and the `eta` ratio\nbetween refraction indices; the computed vector is returned as a new\n`OOGL.Vector3` object, this object is not changed.",
            "itemtype": "method",
            "name": "getRefracted",
            "params": [
                {
                    "name": "n",
                    "description": "The surface normal at the incidence point.",
                    "type": "OOGL.Vector3"
                },
                {
                    "name": "eta",
                    "description": "The ratio between refraction indices.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The refracted vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector3(0.3, -1, 0);\n\tvar n = new OOGL.Vector3(0, 1, 0);\n\tvar w = v.getRefracted(n, 1.3);"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 405,
            "description": "The null vector `(0, 0, 0)`.",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "OOGL.Vector3",
            "example": [
                "\n\tvar position = OOGL.Vector3.NULL.clone();"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 416,
            "description": "The `(1, 0, 0)` vector.",
            "itemtype": "property",
            "name": "I",
            "static": 1,
            "type": "OOGL.Vector3",
            "example": [
                "\n\tvar position = new OOGL.Vector3.NULL.clone();\n\tvar heading = new OOGL.RotationMatrix3(yaw);\n\n\tposition.add(heading.by(OOGL.Vector3.I));"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 430,
            "description": "The `(0, 1, 0)` vector.",
            "itemtype": "property",
            "name": "J",
            "static": 1,
            "type": "OOGL.Vector3",
            "example": [
                "\n\tvar position = new OOGL.Vector3.NULL.clone();\n\tvar heading = new OOGL.RotationMatrix3(yaw);\n\n\tposition.add(heading.by(OOGL.Vector3.J));"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector3.js",
            "line": 444,
            "description": "The `(0, 0, 1)` vector.",
            "itemtype": "property",
            "name": "K",
            "static": 1,
            "type": "OOGL.Vector3",
            "example": [
                "\n\tvar position = new OOGL.Vector3.NULL.clone();\n\tvar heading = new OOGL.RotationMatrix3(yaw);\n\n\tposition.add(heading.by(OOGL.Vector3.K));"
            ],
            "class": "OOGL.Vector3",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 21,
            "description": "The X component.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 29,
            "description": "The y component.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 37,
            "description": "The Z component.",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 45,
            "description": "The homogeneous W component.",
            "itemtype": "property",
            "name": "w",
            "type": "Number",
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 55,
            "description": "Clones this vector and returns the new one.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The new vector.",
                "type": "OOGL.Vector4"
            },
            "example": [
                "\n\tvar w = v.clone();"
            ],
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 67,
            "description": "Returns this vector as an array of four elements.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An array containing the X, Y, Z and W components of\n\tthis vector.",
                "type": "Number[]"
            },
            "example": [
                "\n\tvar v = new OOGL.Vector4(1, 2, 3, 1);\n\tprogram.uniform4fv('Position', v.toArray());"
            ],
            "class": "OOGL.Vector4",
            "module": "OOGL"
        },
        {
            "file": "src\\Vector4.js",
            "line": 81,
            "description": "Converts this homogeneous vector to a 3-component standard vector\ndividing the X, Y and Z components by the W component. This method\nproduces a new `OOGL.Vector3` object, while this vector is not changed.",
            "itemtype": "method",
            "name": "toStandard",
            "return": {
                "description": "The computed standard vector.",
                "type": "OOGL.Vector3"
            },
            "example": [
                "\n\tvar w = new OOGL.Vector4(2, 4, 6, 2);\n\tvar v = w.toStandard(); // v is (1, 2, 3)"
            ],
            "class": "OOGL.Vector4",
            "module": "OOGL"
        }
    ],
    "warnings": []
}